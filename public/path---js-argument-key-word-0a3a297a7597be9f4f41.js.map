{"version":3,"sources":["webpack:///path---js-argument-key-word-0a3a297a7597be9f4f41.js","webpack:///./.cache/json/js-argument-key-word.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/js-argument-key-word.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","path"],"mappings":"AAAAA,cAAc,KAERC,8EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,cACAC,MAAA,YACAC,OAAA,oBAGAC,gBACAC,GAAA,+IACAC,KAAA,yyEACAC,aACAL,MAAA,8CACAM,KAAA,uBAIAC,aACAC,KAAA","file":"path---js-argument-key-word-0a3a297a7597be9f4f41.js","sourcesContent":["webpackJsonp([44],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/js-argument-key-word.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"site\": {\n\t\t\t\t\"siteMetadata\": {\n\t\t\t\t\t\"title\": \"Jeffry.in\",\n\t\t\t\t\t\"author\": \"Jeff Wainwright\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"id\": \"/Users/jwainwright/Dropbox/me/git-docs/yowainwright.github.io/src/pages/2014-12-02-js-argument-keyword.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\"html\": \"<p>Today, I was assigned the task of printing logs to the page instead of to the <code>console</code> if there was a certain string appended to the url so that the our Q/A engineer could get that data into his program.</p>\\n<p>My task was manageable, but before committing my pull request my boss &#x26; I went over the debug program (called <code>debug.js</code>). The process of describing what's happening in a program I find highly beneficial. As I was talking through the program I noticed the <code>[argument](//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments)</code> key word.</p>\\n<p>The <code>argument</code> key word is an object that stores the arguments passed into a function within the scope of that function.</p>\\n<pre><code class=\\\"language-javascript\\\">var passArguments = function() {\\n  return document.write(arguments.length);\\n};\\npassArguments(1, 2, 3, 4, 5);\\n// result: the document prints out 5\\n</code></pre>\\n<p>Live <a href=\\\"//codepen.io/yowainwright/pen/2f64d380b74302b396927d297828cd3a\\\">Code</a></p>\\n<p>For the program that I was working on today, the program takes the first argument of the function <code>passArguments</code> as stores it in a variable set as category. Then it loops through the other argemuents &#x26; strong them in the logs array.</p>\\n<pre><code class=\\\"language-javascript\\\">var passArguments = function() {\\n    var category = arguments[0];\\n    logs = new Array( arguments.length - 1 );\\n    for (var i = 0, j = logs.length; i &#x3C; j; i++) {\\n      logs[i] = arguments[i+1];\\n    }\\n    document.write(category + ' : ' + '[' + logs + ']' );\\n};\\npassArguments('Categories', '1', '2', '3', '4', '5');\\n</code></pre>\\n<p>Live <a href=\\\"//codepen.io/yowainwright/pen/6b24e79b8dcd00668619acd396dd4b46\\\">Code</a></p>\\n<p>While my boss &#x26; I were going over the program, he wrote out the code similarily to how a browser compiles it.</p>\\n<pre><code class=\\\"language-javascript\\\">arguments = ['ga', 'info a', 'info b', 'info c']\\narguments = ['ga', 'info a', 'info b', 'info c']\\n\\ncategory = 'ga';\\nlogs = [ , , ]\\n\\nfor loop\\nstart at: 0\\ngo to: 3\\n\\nfor loop 1( i = 0)\\nlogs[0] = 'info a'\\nlogs = [ 'info a', , ]\\n\\nfor loop 2 (i = 1)\\nlogs = [ 'info a', 'info b', ]\\n\\nfor loop 3\\nlogs = [ 'info a', 'info b', 'info c']\\n\\nend for loop\\n</code></pre>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Javascript for loop & the argument key word\",\n\t\t\t\t\t\"date\": \"December 02, 2014\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"path\": \"/js-argument-key-word/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---js-argument-key-word-0a3a297a7597be9f4f41.js","module.exports = {\n\t\"data\": {\n\t\t\"site\": {\n\t\t\t\"siteMetadata\": {\n\t\t\t\t\"title\": \"Jeffry.in\",\n\t\t\t\t\"author\": \"Jeff Wainwright\"\n\t\t\t}\n\t\t},\n\t\t\"markdownRemark\": {\n\t\t\t\"id\": \"/Users/jwainwright/Dropbox/me/git-docs/yowainwright.github.io/src/pages/2014-12-02-js-argument-keyword.md absPath of file >>> MarkdownRemark\",\n\t\t\t\"html\": \"<p>Today, I was assigned the task of printing logs to the page instead of to the <code>console</code> if there was a certain string appended to the url so that the our Q/A engineer could get that data into his program.</p>\\n<p>My task was manageable, but before committing my pull request my boss &#x26; I went over the debug program (called <code>debug.js</code>). The process of describing what's happening in a program I find highly beneficial. As I was talking through the program I noticed the <code>[argument](//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments)</code> key word.</p>\\n<p>The <code>argument</code> key word is an object that stores the arguments passed into a function within the scope of that function.</p>\\n<pre><code class=\\\"language-javascript\\\">var passArguments = function() {\\n  return document.write(arguments.length);\\n};\\npassArguments(1, 2, 3, 4, 5);\\n// result: the document prints out 5\\n</code></pre>\\n<p>Live <a href=\\\"//codepen.io/yowainwright/pen/2f64d380b74302b396927d297828cd3a\\\">Code</a></p>\\n<p>For the program that I was working on today, the program takes the first argument of the function <code>passArguments</code> as stores it in a variable set as category. Then it loops through the other argemuents &#x26; strong them in the logs array.</p>\\n<pre><code class=\\\"language-javascript\\\">var passArguments = function() {\\n    var category = arguments[0];\\n    logs = new Array( arguments.length - 1 );\\n    for (var i = 0, j = logs.length; i &#x3C; j; i++) {\\n      logs[i] = arguments[i+1];\\n    }\\n    document.write(category + ' : ' + '[' + logs + ']' );\\n};\\npassArguments('Categories', '1', '2', '3', '4', '5');\\n</code></pre>\\n<p>Live <a href=\\\"//codepen.io/yowainwright/pen/6b24e79b8dcd00668619acd396dd4b46\\\">Code</a></p>\\n<p>While my boss &#x26; I were going over the program, he wrote out the code similarily to how a browser compiles it.</p>\\n<pre><code class=\\\"language-javascript\\\">arguments = ['ga', 'info a', 'info b', 'info c']\\narguments = ['ga', 'info a', 'info b', 'info c']\\n\\ncategory = 'ga';\\nlogs = [ , , ]\\n\\nfor loop\\nstart at: 0\\ngo to: 3\\n\\nfor loop 1( i = 0)\\nlogs[0] = 'info a'\\nlogs = [ 'info a', , ]\\n\\nfor loop 2 (i = 1)\\nlogs = [ 'info a', 'info b', ]\\n\\nfor loop 3\\nlogs = [ 'info a', 'info b', 'info c']\\n\\nend for loop\\n</code></pre>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Javascript for loop & the argument key word\",\n\t\t\t\t\"date\": \"December 02, 2014\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"path\": \"/js-argument-key-word/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/js-argument-key-word.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/js-argument-key-word.json\n// module chunks = 44"],"sourceRoot":""}