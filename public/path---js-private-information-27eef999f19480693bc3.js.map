{"version":3,"sources":["webpack:///path---js-private-information-27eef999f19480693bc3.js","webpack:///./.cache/json/js-private-information.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/js-private-information.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","path"],"mappings":"AAAAA,cAAc,KAERC,gFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,cACAC,MAAA,YACAC,OAAA,oBAGAC,gBACAC,GAAA,gJACAC,KAAA,k2LACAC,aACAL,MAAA,6CACAM,KAAA,sBAIAC,aACAC,KAAA","file":"path---js-private-information-27eef999f19480693bc3.js","sourcesContent":["webpackJsonp([40],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/js-private-information.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"site\": {\n\t\t\t\t\"siteMetadata\": {\n\t\t\t\t\t\"title\": \"Jeffry.in\",\n\t\t\t\t\t\"author\": \"Jeff Wainwright\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"id\": \"/Users/jwainwright/Dropbox/me/git-docs/yowainwright.github.io/src/pages/2015-01-22-js-private-variables.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\"html\": \"<p>Creating private information, meaning variables, properties/property values, function, methods in JavaScript is an important concept for storing information that can't be overwritten.</p>\\n<h2>What does <em>private</em> mean?</h2>\\n<p><a href=\\\"//javascript.crockford.com/private.html\\\">Private</a> means that only the current function (<em>class</em>) will have access to the variables (<em>properties/ property values</em>), functions (<em>methods</em>) within it. This is very important to make sure that your code is not overwritten.</p>\\n<h2><em>Public</em> vs <em>Private</em></h2>\\n<ul>\\n<li>Public variables or functions can be added to, modified, or deleted.</li>\\n<li>Private variables or functions can't be changed.</li>\\n</ul>\\n<h2>A recent code challenge</h2>\\n<p>This concept is still pretty new to me so my boss gave me the task of writting some functions that would iterate on a number so that:</p>\\n<ul>\\n<li>there would be 3 functions that would be aware of each other &#x26; each function would add 1.</li>\\n<li>there would then be a global variable that would be declared that would call 1 of the functions</li>\\n<li>then there would be another parent function that would call the 2nd original function</li>\\n<li>within that parent function there would be another child function that would call the 3rd function &#x26; log the value for the 3 orginal functions</li>\\n<li>within that parent function, after the child function - the child function would be called twice.</li>\\n<li>after then closing of the parent function, the parent function would be called three times</li>\\n</ul>\\n<pre><code class=\\\"language-javascript\\\">var num = 1;\\n\\nvar aHero = function() {\\n  return num++;\\n};\\nvar aDeed = function() {\\n  return num++;\\n};\\n\\nvar aFoil = function() {\\n  return num++;\\n};\\n\\nvar log = function(text) {\\n  $('#logArea').append('&#x3C;div>' + text + '&#x3C;/div>');\\n}\\n\\nvar hero = aHero();\\nvar newSaga = function() {\\n  var foil = aFoil();\\n  var saga = function() {\\n    var deed = aDeed();\\n    log(hero + ' ' + deed + ' ' + foil);\\n  }\\n  saga();\\n  saga();\\n};\\nnewSaga();\\nnewSaga();\\n</code></pre>\\n<p><strong>Which renders the result of:</strong></p>\\n<pre><code class=\\\"language-javascript\\\">1 3 2\\n1 4 2\\n1 6 5\\n1 7 5\\n</code></pre>\\n<p>After a little understand of the concept for the above task, I was able to render the result fairly easily. Then my boss threw in what he called a wrinkle. He put in a check that sets <code>num</code> to be the letter <code>a</code>.</p>\\n<pre><code class=\\\"language-javascript\\\">var theNumber = 1;\\n\\nvar aHero = function() {\\n  return theNumber++;\\n};\\nvar aDeed = function() {\\n  return theNumber++;\\n};\\n\\nvar aFoil = function() {\\n  return theNumber++;\\n};\\n\\nvar log = function(text) {\\n  $('#logArea').append('&#x3C;div>' + text + '&#x3C;/div>');\\n}\\n\\nvar hero = aHero();\\nvar newSaga = function() {\\n  var foil = aFoil();\\n  var saga = function() {\\n    if( typeof num !== 'undefined') {\\n      num = 'a';\\n    }\\n    var deed = aDeed();\\n    log(hero + ' ' + deed + ' ' + foil);\\n  }\\n  saga();\\n  saga();\\n};\\nnewSaga();\\nnewSaga();\\n</code></pre>\\n<p><strong>The code abe renders this result:</strong></p>\\n<pre><code class=\\\"language-javascript\\\">NaN NaN NaN\\nNaN NaN NaN\\nNaN NaN NaN\\nNaN NaN NaN\\nNaN NaN NaN\\n</code></pre>\\n<p>My boss then asked me to, without changing anything inside of the parent, <code>NewSaga()</code> function, render the original result which was honestly very challenging for me.</p>\\n<p>This is what I came up with with some help.</p>\\n<pre><code class=\\\"language-javascript\\\">var incrementProvider = function() {\\n  var num = 1;\\n  var addTheNumber = function() {\\n    var result = num;\\n    num = num + 1;\\n    return result;\\n  };\\n  return addTheNumber;\\n};\\n\\nvar theNumber = incrementProvider();\\n\\nvar aHero = function() {\\n  return theNumber();\\n};\\nvar aDeed = function() {\\n  return theNumber();\\n};\\n\\nvar aFoil = function() {\\n  return theNumber();\\n};\\n\\nvar log = function(text) {\\n  $('#logArea').append('&#x3C;div>' + text + '&#x3C;/div>');\\n}\\n\\nvar hero = aHero();\\nvar newSaga = function() {\\n  var foil = aFoil();\\n  var saga = function() {\\n    if( typeof num !== 'undefined') {\\n      num = 'a';\\n    }\\n    var deed = aDeed();\\n    log(hero + ' ' + deed + ' ' + foil);\\n  }\\n  saga();\\n  saga();\\n};\\nnewSaga();\\nnewSaga();\\n</code></pre>\\n<p>Live <a href=\\\"//codepen.io/yowainwright/pen/14c4a193a20462b0b7c23a8b3128bc2d\\\">code</a></p>\\n<p><strong>And this is what my boss came up with:</strong></p>\\n<pre><code class=\\\"language-javascript\\\">var GeneratorClass = function() {\\n  var inside = 1;\\n  var numberGenerator = function() {\\n    return (inside++).toString();\\n  }\\n  return {numberGenerator: numberGenerator};\\n};\\n\\nvar generator = new GeneratorClass();\\nvar aHero = generator.numberGenerator;\\nvar aDeed = generator.numberGenerator;\\nvar aFoil = generator.numberGenerator;\\n\\n//var aHero = (new GeneratorClass()).numberGenerator;\\n//var aDeed = (new GeneratorClass()).numberGenerator;\\n//var aFoil = (new GeneratorClass()).numberGenerator;\\n\\nvar log = function(text) {\\n  $('#logArea').append('&#x3C;div>' + text + '&#x3C;/div>');\\n}\\n\\nvar hero = aHero();\\nvar newSaga = function() {\\n  var foil = aFoil();\\n  var saga = function() {\\n    if( typeof num !== 'undefined') {\\n      num = 'a';\\n    }\\n    var deed = aDeed();\\n    log(hero + ' ' + deed + ' ' + foil);\\n  }\\n  saga();\\n  saga();\\n};\\nnewSaga();\\nnewSaga();\\n</code></pre>\\n<p>Live <a href=\\\"http://codepen.io/scottlaplante/pen/RryKEe\\\">code</a></p>\\n<p>Both examples render the same result but my boss's code is much cleaner I think.</p>\\n<p>This project was given to me after doing Udacity's <a href=\\\"//www.udacity.com/course/object-oriented-javascript--ud015\\\">OOP JavaScript class</a>. It's been interesting after reviewing the class with my boss how much I thought I understood versus how much I actually do in practice.</p>\\n<p>Welp, back to coding ...</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Creating private information in JavaScript\",\n\t\t\t\t\t\"date\": \"January 22, 2015\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"path\": \"/js-private-information/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---js-private-information-27eef999f19480693bc3.js","module.exports = {\n\t\"data\": {\n\t\t\"site\": {\n\t\t\t\"siteMetadata\": {\n\t\t\t\t\"title\": \"Jeffry.in\",\n\t\t\t\t\"author\": \"Jeff Wainwright\"\n\t\t\t}\n\t\t},\n\t\t\"markdownRemark\": {\n\t\t\t\"id\": \"/Users/jwainwright/Dropbox/me/git-docs/yowainwright.github.io/src/pages/2015-01-22-js-private-variables.md absPath of file >>> MarkdownRemark\",\n\t\t\t\"html\": \"<p>Creating private information, meaning variables, properties/property values, function, methods in JavaScript is an important concept for storing information that can't be overwritten.</p>\\n<h2>What does <em>private</em> mean?</h2>\\n<p><a href=\\\"//javascript.crockford.com/private.html\\\">Private</a> means that only the current function (<em>class</em>) will have access to the variables (<em>properties/ property values</em>), functions (<em>methods</em>) within it. This is very important to make sure that your code is not overwritten.</p>\\n<h2><em>Public</em> vs <em>Private</em></h2>\\n<ul>\\n<li>Public variables or functions can be added to, modified, or deleted.</li>\\n<li>Private variables or functions can't be changed.</li>\\n</ul>\\n<h2>A recent code challenge</h2>\\n<p>This concept is still pretty new to me so my boss gave me the task of writting some functions that would iterate on a number so that:</p>\\n<ul>\\n<li>there would be 3 functions that would be aware of each other &#x26; each function would add 1.</li>\\n<li>there would then be a global variable that would be declared that would call 1 of the functions</li>\\n<li>then there would be another parent function that would call the 2nd original function</li>\\n<li>within that parent function there would be another child function that would call the 3rd function &#x26; log the value for the 3 orginal functions</li>\\n<li>within that parent function, after the child function - the child function would be called twice.</li>\\n<li>after then closing of the parent function, the parent function would be called three times</li>\\n</ul>\\n<pre><code class=\\\"language-javascript\\\">var num = 1;\\n\\nvar aHero = function() {\\n  return num++;\\n};\\nvar aDeed = function() {\\n  return num++;\\n};\\n\\nvar aFoil = function() {\\n  return num++;\\n};\\n\\nvar log = function(text) {\\n  $('#logArea').append('&#x3C;div>' + text + '&#x3C;/div>');\\n}\\n\\nvar hero = aHero();\\nvar newSaga = function() {\\n  var foil = aFoil();\\n  var saga = function() {\\n    var deed = aDeed();\\n    log(hero + ' ' + deed + ' ' + foil);\\n  }\\n  saga();\\n  saga();\\n};\\nnewSaga();\\nnewSaga();\\n</code></pre>\\n<p><strong>Which renders the result of:</strong></p>\\n<pre><code class=\\\"language-javascript\\\">1 3 2\\n1 4 2\\n1 6 5\\n1 7 5\\n</code></pre>\\n<p>After a little understand of the concept for the above task, I was able to render the result fairly easily. Then my boss threw in what he called a wrinkle. He put in a check that sets <code>num</code> to be the letter <code>a</code>.</p>\\n<pre><code class=\\\"language-javascript\\\">var theNumber = 1;\\n\\nvar aHero = function() {\\n  return theNumber++;\\n};\\nvar aDeed = function() {\\n  return theNumber++;\\n};\\n\\nvar aFoil = function() {\\n  return theNumber++;\\n};\\n\\nvar log = function(text) {\\n  $('#logArea').append('&#x3C;div>' + text + '&#x3C;/div>');\\n}\\n\\nvar hero = aHero();\\nvar newSaga = function() {\\n  var foil = aFoil();\\n  var saga = function() {\\n    if( typeof num !== 'undefined') {\\n      num = 'a';\\n    }\\n    var deed = aDeed();\\n    log(hero + ' ' + deed + ' ' + foil);\\n  }\\n  saga();\\n  saga();\\n};\\nnewSaga();\\nnewSaga();\\n</code></pre>\\n<p><strong>The code abe renders this result:</strong></p>\\n<pre><code class=\\\"language-javascript\\\">NaN NaN NaN\\nNaN NaN NaN\\nNaN NaN NaN\\nNaN NaN NaN\\nNaN NaN NaN\\n</code></pre>\\n<p>My boss then asked me to, without changing anything inside of the parent, <code>NewSaga()</code> function, render the original result which was honestly very challenging for me.</p>\\n<p>This is what I came up with with some help.</p>\\n<pre><code class=\\\"language-javascript\\\">var incrementProvider = function() {\\n  var num = 1;\\n  var addTheNumber = function() {\\n    var result = num;\\n    num = num + 1;\\n    return result;\\n  };\\n  return addTheNumber;\\n};\\n\\nvar theNumber = incrementProvider();\\n\\nvar aHero = function() {\\n  return theNumber();\\n};\\nvar aDeed = function() {\\n  return theNumber();\\n};\\n\\nvar aFoil = function() {\\n  return theNumber();\\n};\\n\\nvar log = function(text) {\\n  $('#logArea').append('&#x3C;div>' + text + '&#x3C;/div>');\\n}\\n\\nvar hero = aHero();\\nvar newSaga = function() {\\n  var foil = aFoil();\\n  var saga = function() {\\n    if( typeof num !== 'undefined') {\\n      num = 'a';\\n    }\\n    var deed = aDeed();\\n    log(hero + ' ' + deed + ' ' + foil);\\n  }\\n  saga();\\n  saga();\\n};\\nnewSaga();\\nnewSaga();\\n</code></pre>\\n<p>Live <a href=\\\"//codepen.io/yowainwright/pen/14c4a193a20462b0b7c23a8b3128bc2d\\\">code</a></p>\\n<p><strong>And this is what my boss came up with:</strong></p>\\n<pre><code class=\\\"language-javascript\\\">var GeneratorClass = function() {\\n  var inside = 1;\\n  var numberGenerator = function() {\\n    return (inside++).toString();\\n  }\\n  return {numberGenerator: numberGenerator};\\n};\\n\\nvar generator = new GeneratorClass();\\nvar aHero = generator.numberGenerator;\\nvar aDeed = generator.numberGenerator;\\nvar aFoil = generator.numberGenerator;\\n\\n//var aHero = (new GeneratorClass()).numberGenerator;\\n//var aDeed = (new GeneratorClass()).numberGenerator;\\n//var aFoil = (new GeneratorClass()).numberGenerator;\\n\\nvar log = function(text) {\\n  $('#logArea').append('&#x3C;div>' + text + '&#x3C;/div>');\\n}\\n\\nvar hero = aHero();\\nvar newSaga = function() {\\n  var foil = aFoil();\\n  var saga = function() {\\n    if( typeof num !== 'undefined') {\\n      num = 'a';\\n    }\\n    var deed = aDeed();\\n    log(hero + ' ' + deed + ' ' + foil);\\n  }\\n  saga();\\n  saga();\\n};\\nnewSaga();\\nnewSaga();\\n</code></pre>\\n<p>Live <a href=\\\"http://codepen.io/scottlaplante/pen/RryKEe\\\">code</a></p>\\n<p>Both examples render the same result but my boss's code is much cleaner I think.</p>\\n<p>This project was given to me after doing Udacity's <a href=\\\"//www.udacity.com/course/object-oriented-javascript--ud015\\\">OOP JavaScript class</a>. It's been interesting after reviewing the class with my boss how much I thought I understood versus how much I actually do in practice.</p>\\n<p>Welp, back to coding ...</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Creating private information in JavaScript\",\n\t\t\t\t\"date\": \"January 22, 2015\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"path\": \"/js-private-information/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/js-private-information.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/js-private-information.json\n// module chunks = 40"],"sourceRoot":""}