{"version":3,"sources":["webpack:///path---making-a-js-plugin-4c1ff3f615e9132d2345.js","webpack:///./.cache/json/making-a-js-plugin.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/making-a-js-plugin.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","path"],"mappings":"AAAAA,cAAc,KAERC,4EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,cACAC,MAAA,YACAC,OAAA,oBAGAC,gBACAC,GAAA,+IACAC,KAAA,qzDACAC,aACAL,MAAA,wEACAM,KAAA,uBAIAC,aACAC,KAAA","file":"path---making-a-js-plugin-4c1ff3f615e9132d2345.js","sourcesContent":["webpackJsonp([35],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/making-a-js-plugin.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"site\": {\n\t\t\t\t\"siteMetadata\": {\n\t\t\t\t\t\"title\": \"Jeffry.in\",\n\t\t\t\t\t\"author\": \"Jeff Wainwright\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"id\": \"/Users/jwainwright/Dropbox/me/git-docs/yowainwright.github.io/src/pages/2015-02-09-js-template-strings.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\"html\": \"<p>Writing Strings and String Template in ES6 are so much cleaner that writing strings before and very powerful. Where some ES6 featuring can get ugly at build time, I've found that ES6 strings are very powerful. </p>\\n<p>Strings with dynamic data used to be structured something like this:</p>\\n<pre><code class=\\\"language-javascript\\\">var someData = 'this is some data' + someVar + 'some other data';\\n</code></pre>\\n<p>With ES6, we can write strings much more cleanly:</p>\\n<pre><code class=\\\"language-javaScript\\\">const someData = `this is some data ${someVar} some other data`;\\n</code></pre>\\n<p>To me this is much more clear and I've found when transpiling code, the end result is as expected <em>most</em> every time.</p>\\n<h2>But wait, there's more</h2>\\n<p>After watching <a href=\\\"//es6.io/\\\">ES6 for Everyone</a> by <a href=\\\"//wesbos.com/\\\">Wes Bos</a> I learned more about template tagging.</p>\\n<h3>Template Tagging</h3>\\n<p>Template tagging makes template strings more dynyamic. </p>\\n<p>The example below iterates over a string and an undefined number of values (using the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\\\">spread</a> operator) within a string until the the string is a static value.</p>\\n<pre><code class=\\\"language-javaScript\\\">function addCustomName(stings, ...values) {\\n  let str = ''; \\n  strings.forEach((string, i) => {\\n    str += string + (values[i] || '');\\n  });\\n}\\n\\nconst fullName = addCustomName`Hi, my name is ${firstName} ${lastName}`;\\nconsole.log(fullName);\\n</code></pre>\\n<h2>ES6 Templates Notes Conclusion</h2>\\n<p>After watching ES6 for everyone, the course re-affirmed information about Template Strings and Tagging. The course's careful description and examples of template tagging offered a much clearer its utility. ~Thanks</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Template Strings and Template Tagging After Watching ES6 For Everyone\",\n\t\t\t\t\t\"date\": \"February 09, 2015\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"path\": \"/making-a-js-plugin/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---making-a-js-plugin-4c1ff3f615e9132d2345.js","module.exports = {\n\t\"data\": {\n\t\t\"site\": {\n\t\t\t\"siteMetadata\": {\n\t\t\t\t\"title\": \"Jeffry.in\",\n\t\t\t\t\"author\": \"Jeff Wainwright\"\n\t\t\t}\n\t\t},\n\t\t\"markdownRemark\": {\n\t\t\t\"id\": \"/Users/jwainwright/Dropbox/me/git-docs/yowainwright.github.io/src/pages/2015-02-09-js-template-strings.md absPath of file >>> MarkdownRemark\",\n\t\t\t\"html\": \"<p>Writing Strings and String Template in ES6 are so much cleaner that writing strings before and very powerful. Where some ES6 featuring can get ugly at build time, I've found that ES6 strings are very powerful. </p>\\n<p>Strings with dynamic data used to be structured something like this:</p>\\n<pre><code class=\\\"language-javascript\\\">var someData = 'this is some data' + someVar + 'some other data';\\n</code></pre>\\n<p>With ES6, we can write strings much more cleanly:</p>\\n<pre><code class=\\\"language-javaScript\\\">const someData = `this is some data ${someVar} some other data`;\\n</code></pre>\\n<p>To me this is much more clear and I've found when transpiling code, the end result is as expected <em>most</em> every time.</p>\\n<h2>But wait, there's more</h2>\\n<p>After watching <a href=\\\"//es6.io/\\\">ES6 for Everyone</a> by <a href=\\\"//wesbos.com/\\\">Wes Bos</a> I learned more about template tagging.</p>\\n<h3>Template Tagging</h3>\\n<p>Template tagging makes template strings more dynyamic. </p>\\n<p>The example below iterates over a string and an undefined number of values (using the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\\\">spread</a> operator) within a string until the the string is a static value.</p>\\n<pre><code class=\\\"language-javaScript\\\">function addCustomName(stings, ...values) {\\n  let str = ''; \\n  strings.forEach((string, i) => {\\n    str += string + (values[i] || '');\\n  });\\n}\\n\\nconst fullName = addCustomName`Hi, my name is ${firstName} ${lastName}`;\\nconsole.log(fullName);\\n</code></pre>\\n<h2>ES6 Templates Notes Conclusion</h2>\\n<p>After watching ES6 for everyone, the course re-affirmed information about Template Strings and Tagging. The course's careful description and examples of template tagging offered a much clearer its utility. ~Thanks</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Template Strings and Template Tagging After Watching ES6 For Everyone\",\n\t\t\t\t\"date\": \"February 09, 2015\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"path\": \"/making-a-js-plugin/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/making-a-js-plugin.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/making-a-js-plugin.json\n// module chunks = 35"],"sourceRoot":""}