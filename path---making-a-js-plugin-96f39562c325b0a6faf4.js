webpackJsonp([0x47f7468be7513800],{"./node_modules/json-loader/index.js!./.cache/json/making-a-js-plugin.json":function(n,a){n.exports={data:{site:{siteMetadata:{title:"Jeffry.in",author:"Jeff Wainwright"}},markdownRemark:{id:"/Users/jwainwright/Dropbox/me/git-docs/yowainwright.github.io/src/pages/2015-02-09-js-template-strings.md absPath of file >>> MarkdownRemark",html:'<p>Writing Strings and String Template in ES6 are so much cleaner that writing strings before and very powerful. Where some ES6 featuring can get ugly at build time, I’ve found that ES6 strings are very powerful. </p>\n<p>Strings with dynamic data used to be structured something like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> someData <span class="token operator">=</span> <span class="token string">\'this is some data\'</span> <span class="token operator">+</span> someVar <span class="token operator">+</span> <span class="token string">\'some other data\'</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>With ES6, we can write strings much more cleanly:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">const</span> someData <span class="token operator">=</span> <span class="token template-string"><span class="token string">`this is some data </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>someVar<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> some other data`</span></span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>To me this is much more clear and I’ve found when transpiling code, the end result is as expected <em>most</em> every time.</p>\n<h2>But wait, there’s more</h2>\n<p>After watching <a href="//es6.io/">ES6 for Everyone</a> by <a href="//wesbos.com/">Wes Bos</a> I learned more about template tagging.</p>\n<h3>Template Tagging</h3>\n<p>Template tagging makes template strings more dynyamic. </p>\n<p>The example below iterates over a string and an undefined number of values (using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator">spread</a> operator) within a string until the the string is a static value.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">addCustomName</span><span class="token punctuation">(</span>stings<span class="token punctuation">,</span> <span class="token operator">...</span>values<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span> \n  strings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    str <span class="token operator">+</span><span class="token operator">=</span> string <span class="token operator">+</span> <span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> fullName <span class="token operator">=</span> addCustomName<span class="token template-string"><span class="token string">`Hi, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2>ES6 Templates Notes Conclusion</h2>\n<p>After watching ES6 for everyone, the course re-affirmed information about Template Strings and Tagging. The course’s careful description and examples of template tagging offered a much clearer its utility. ~Thanks</p>',frontmatter:{featured_image:null,meta:"This post summarizes my notes on template strings and template tagging after watching Wes Bos's ES6 For Everyone",title:"Template Strings and Template Tagging After Watching ES6 For Everyone",date:"February 09, 2015"}}},pathContext:{path:"/making-a-js-plugin/"}}}});
//# sourceMappingURL=path---making-a-js-plugin-96f39562c325b0a6faf4.js.map