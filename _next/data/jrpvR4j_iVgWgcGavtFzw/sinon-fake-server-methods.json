{"pageProps":{"frontmatter":{"title":"Digging into Sinon Fake Server Methods","meta":"Digging into Sinon Fake Server Methods and how to use them.","categories":["javascript"],"date":"September 5, 2017","path":"/sinon-fake-server-methods"},"content":"<p><a href=\"http://sinonjs.org/\">Sinon</a> is a powerful library used for stubbing functions, methods, xhr calls, and servers in JavaScript. The library and concept have confused me several times. I've found defining the interface to be challenging. Often, I realize that if the interface is challenging me, I need to rethink it.</p>\n<p>In this post, I will explain a bit of Sinon for context and then dig into faking a server with Sinon.</p>\n<hr>\n<ul>\n<li>Stubbing, in JavaScript, is the act of making a dummy function that acts like a real JavaScript Interface allowing the stubber to fully test the thing they're testing. In example, if your testing a method that gets <code>.user()</code> information</li>\n<li>Interface, in regards to this post, is the way information is passed, changed, published between methods and functions. If information interface is not optimal, tests should be able to show that.</li>\n</ul>\n<h4>For this post, here's a stub example</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\"><span class=\"token keyword\">let</span> server\n</span><span class=\"code-line\"><span class=\"token comment\">// then later in code a value is assigned to the variable</span>\n</span><span class=\"code-line\">server <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token property-access\">fakeServer</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<h2>Why would developers stub a server?</h2>\n<p>Engineers stub servers so that they can make fake requests to stubbed servers. The benefit of doing this is that the engineer doesn't need a real server and because they're not dependent on a real server, they can focus on testing whatever their code does that needs a server to test it.</p>\n<h2>A specific example</h2>\n<p>In the example below, an ajax request is being made with plain ole' JavaScript</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> callbackInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">let</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token literal-property property\">stuff</span><span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  xhr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  xhr<span class=\"token punctuation\">.</span><span class=\"token property-access\">withCredentials</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n</span><span class=\"code-line\">  <span class=\"token comment\">// update `info` onload</span>\n</span><span class=\"code-line\">  xhr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span><span class=\"token property-access\">status</span> <span class=\"token operator\">></span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Some Warning'</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">      <span class=\"token function\">callbackInfo</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">      <span class=\"token keyword control-flow\">return</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">const</span> resp <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span><span class=\"token property-access\">responseText</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">const</span> respinfo <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span><span class=\"token property-access\">info</span> <span class=\"token operator\">||</span> <span class=\"token keyword null nil\">null</span>\n</span><span class=\"code-line\">    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>respinfo <span class=\"token operator\">===</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">    <span class=\"token comment\">// update info</span>\n</span><span class=\"code-line\">    info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">      <span class=\"token literal-property property\">stuff</span><span class=\"token operator\">:</span> respinfo<span class=\"token punctuation\">.</span><span class=\"token property-access\">status</span> <span class=\"token operator\">||</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">    <span class=\"token function\">callbackInfo</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  xhr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Some Warning'</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">    <span class=\"token function\">callbackInfo</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">  xhr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>For the code example above, there is an interface that expects to get information from an ajax request and provide information in responseâ€”a response being what comes back from the server.</p>\n<h2>How to stub a server with Sinon</h2>\n<p>In the example above:</p>\n<ul>\n<li>The xhr request waits for a load event.</li>\n<li>If the response in above a 400, that means there is an error with the response, and the console should warn developers.</li>\n<li>If the response is not above a 400, the request will receive a <code>{object}</code> with a <code>status</code>.</li>\n<li>In a callback function, the xhr request will return the object <code>{info}</code>.</li>\n<li>If there is an <code>error</code> instead of a load event, another warning should be added to the console.</li>\n</ul>\n<p>No, that there is an example and a bullet list of what's happening, Sinon can be used to stub a fake server so we can mock the scenarios of the function.</p>\n<p>To do this, first, a stub server must be created.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\">server <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token property-access\">fakeServer</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<p>It is beneficial to mock a successful API response</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\"><span class=\"token comment\">// fake api</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">const</span> resp <span class=\"token operator\">=</span> <span class=\"token string\">'{\"info\": \"stuff\"}'</span>\n</span></code></pre>\n<p>Next, describe what the fake server should response with. This is done with a method provided by Sinon and arguments.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\">server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">respondWith</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span>\n</span></code></pre>\n<p>Sinon's <code>respondWith</code> method is <em>what the server responds with</em>. It can take in 3 arguments, a method (function), a URL or part of a URL, and the anticipated response. The documentation leaves what the method can do a mistery so this blog post will just stick to what's clear: the URL, and the response. When the <code>respondWith</code> method is left to that stubbing out the rest of the fake server response is just a few steps.</p>\n<p>The final step is, triggering the fake response.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\">server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">respond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<p>Altogether the stubbed server looks like this.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\"><span class=\"token comment\">// define fake api success reponse</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">const</span> resp <span class=\"token operator\">=</span> <span class=\"token string\">'{\"info\": \"stuff\"}'</span>\n</span><span class=\"code-line\"><span class=\"token comment\">// create the fake server</span>\n</span><span class=\"code-line\">server <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token property-access\">fakeServer</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token comment\">// declare what the fake server should respond with</span>\n</span><span class=\"code-line\">server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">respondWith</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token comment\">// declare the fake response</span>\n</span></code></pre>\n<h2>How to fully test a stubbed Sinon server</h2>\n<p>Now that this post has gone through stubbing a Sinon server, it will go into how the stub can be used to test the three things that the example function above will require.</p>\n<ul>\n<li>Test a successful response</li>\n<li>Test a failed response</li>\n<li>Test a errant response</li>\n</ul>\n<h3>Testing a successful response</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\"><span class=\"token comment\">// this post reference Mocha testing</span>\n</span><span class=\"code-line\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'provides `user` information with request success'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token comment\">// the done argument along with this.timeout acts waits for a response for 100ms</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token comment\">// create the fake Sinon server</span>\n</span><span class=\"code-line\">  server <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token property-access\">fakeServer</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token comment\">// define the end point and its response within args</span>\n</span><span class=\"code-line\">  server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">respondWith</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token comment\">// define user interface</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">an</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Object'</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">accountStatus</span> <span class=\"token operator\">===</span> <span class=\"token string\">'registered'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">loginState</span> <span class=\"token operator\">===</span> <span class=\"token string\">'semi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">memberType</span> <span class=\"token operator\">===</span> <span class=\"token string\">'146216164134017374'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">userID</span> <span class=\"token operator\">===</span> <span class=\"token string\">'75607431722225'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span>\n</span><span class=\"code-line\">    <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token comment\">// invoke the fake Sinon server response</span>\n</span><span class=\"code-line\">  server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">respond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<h3>Testing a failed response</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'provides `user` information with request success'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token comment\">// create the fake Sinon server</span>\n</span><span class=\"code-line\">  server <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token property-access\">fakeServer</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">respondImmediately</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token comment\">// because the server response immediately, invoking the response is not needed</span>\n</span><span class=\"code-line\">  server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/test'</span><span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token comment\">// define a null user interface</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">an</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Object'</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">accountStatus</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token keyword null nil\">null</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">loginState</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token keyword null nil\">null</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">memberType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token keyword null nil\">null</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">userID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token keyword null nil\">null</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<h3>Testing an errant response</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'provides null defaults with `user` request error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token comment\">// invoke server immediately to enforce error response</span>\n</span><span class=\"code-line\">  server <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token property-access\">fakeServer</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">respondImmediately</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/test'</span><span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token comment\">// define null user interface</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">an</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Object'</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">accountStatus</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token keyword null nil\">null</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">loginState</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token keyword null nil\">null</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">memberType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token keyword null nil\">null</span>\n</span><span class=\"code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">userID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">to</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">be</span><span class=\"token punctuation\">.</span><span class=\"token keyword null nil\">null</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<h2>Conclusion</h2>\n<p>This post has described how to use Sinon's Fake Server to fully test an interface for an XHR request. XHR Requests can be mocked by Sinon easily with a general understanding of Sinon. After setting up a Mock that works for a product, similar tests can be copied and reused elsewhere. This is why Sinon's Fake Server is a powerful tool.</p>\n<p>Please use Sinon and <a href=\"http://sinonjs.org/releases/v2.1.0/fake-xhr-and-server/\">Sinon's Fake Server</a>. Let <a href=\"/issue\">me</a> know if this post can be improved or if it helped.</p>","slug":"sinon-fake-server-methods"},"__N_SSG":true}