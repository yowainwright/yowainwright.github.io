{"pageProps":{"frontmatter":{"title":"Enabling Intelligent Tab Completion in Zsh without High Memory Usage","meta":"This post provides quick tips on how to enable Zsh Tab Completion to provide intelligent completion in Zsh without the bloat.","categories":["code","zsh","terminal","bash"],"date":"May 5, 2024","path":"/lightweight-intelligent-completion-in-zsh"},"content":"<p>Over the last few years, exciting user interface ideas have come on the scene for terminals like <a href=\"https://github.com/withfig/fig\">Fig</a> and <a href=\"https://github.com/warpdotdev/Warp\">Warp</a>. These tools provide great initial development experiences. However, after dealing with high memory usage which slows down other areas of software engineering workflows, I found myself asking, 'Is there a way I can get similar functionality without the bloat?'</p>\n<h2>TL;DR</h2>\n<p>There is! By using a few zsh plugins, you can get a lightweight intelligent completion setup. Read more to consider if this setup might benefit your workflow if you use a mac and zsh.</p>\n<h2>Brief Overview of Tools</h2>\n<p>Warp and Fig, and now <a href=\"https://aws.amazon.com/codewhisperer/\">Amazon Q Developer</a>, provide intelligent completion in your terminal by providing suggestions and completion based on current context. Warp, provides a terminal experience redefined with incorporated ai, autocomplete and fresh UI. Fig is more traditional out of the box with <em>some</em> similar features. However, I found these tools to increase memory usage <a href=\"https://github.com/warpdotdev/Warp/issues/2611\">significantly</a>.</p>\n<h2>Why I chose the approach I did</h2>\n<p>Between terminal experiences the use lots of memory and infrastructure processes that run on my machine that do the same, it's important for me to consider how I allocate CPU and memory. Perhaps I could go into more detail on this in a later post. However, for now, here's a quick overview of how I set up my terminal to provide intelligent completion without the bloat.</p>\n<h2>How I set it up</h2>\n<p>I removed fig and warp and installed the following plugins.</p>\n<hr>\n<ul>\n<li><a href=\"https://github.com/ajeetdsouza/zoxide\">zoxide</a>: a fast path history tool,</li>\n<li><a href=\"https://github.com/junegunn/fzf\">fzf</a>: a favorite terminal fuzzy finder, <a href=\"https://github.com/zsh-users/zsh-autosuggestions\">zsh-autosuggestions</a>: auto-suggestions based on terminal commands</li>\n<li><a href=\"https://github.com/Aloxaf/fzf-tab\">fzf-tab</a>: a tab/dropdown-like developer experience which feels similar to fig and warp:</li>\n<li><a href=\"https://github.com/zsh-users/zsh-syntax-highlighting\">zsh-syntax-highlighting</a>: a tool that highlights commands as you type them</li>\n</ul>\n<hr>\n<p>fzf-tab is the star of the show on for this functionality. Setting it up took some work for me.</p>\n<p>I had to configuration the ui which is mostly (if not all copy/pasted from the docs):</p>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\">  zstyle <span class=\"token string\">':fzf-tab:complete:cd:*'</span> fzf-preview <span class=\"token string\">'eza -1 --color=always $realpath'</span>\n</span><span class=\"code-line\">  zstyle <span class=\"token string\">':fzf-tab:complete:git-(add|diff|restore):*'</span> fzf-preview <span class=\"token string\">'git diff $word | delta'</span>\n</span><span class=\"code-line\">  zstyle <span class=\"token string\">':fzf-tab:complete:git-log:*'</span> fzf-preview <span class=\"token string\">'git log --color=always $word'</span>\n</span><span class=\"code-line\">  zstyle <span class=\"token string\">':fzf-tab:complete:git-help:*'</span> fzf-preview <span class=\"token string\">'git help $word | bat -plman --color=always'</span>\n</span><span class=\"code-line\">  zstyle <span class=\"token string\">':fzf-tab:complete:git-show:*'</span> fzf-preview <span class=\"token string\">'case \"$group\" in \"commit tag\") git show --color=always $word ;; *) git show --color=always $word | delta ;; esac'</span>\n</span><span class=\"code-line\">  zstyle <span class=\"token string\">':fzf-tab:complete:git-checkout:*'</span> fzf-preview <span class=\"token string\">'case \"$group\" in \"modified file\") git diff $word | delta ;; \"recent commit object name\") git show --color=always $word | delta ;; *) git log --color=always $word ;; esac'</span>\n</span><span class=\"code-line\">  zstyle <span class=\"token string\">':completion:*:git-checkout:*'</span> <span class=\"token function\">sort</span> <span class=\"token boolean\">false</span>\n</span><span class=\"code-line\">  zstyle <span class=\"token string\">':completion:*:descriptions'</span> <span class=\"token function\">format</span> <span class=\"token string\">'[%d]'</span>\n</span><span class=\"code-line\">  zstyle <span class=\"token string\">':completion:*'</span> list-colors <span class=\"token variable\">${(s.<span class=\"token operator\">:</span>.)LS_COLORS}</span>\n</span><span class=\"code-line\">  zstyle <span class=\"token string\">':completion:*'</span> menu no\n</span><span class=\"code-line\">  zstyle <span class=\"token string\">':fzf-tab:complete:cd:*'</span> fzf-preview <span class=\"token string\">'eza -1 --color=always $realpath'</span>\n</span><span class=\"code-line\">  zstyle <span class=\"token string\">':fzf-tab:*'</span> switch-group <span class=\"token string\">'&#x3C;'</span> <span class=\"token string\">'>'</span>\n</span><span class=\"code-line\">  zstyle <span class=\"token string\">':completion:*'</span> list-max-items <span class=\"token number\">20</span>\n</span></code></pre>\n<p>I also added more configuration as recommended in the docs with <a href=\"https://github.com/Freed-Wu/fzf-tab-source\">fzf-tab-source</a>:</p>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\">  <span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>zoxide init <span class=\"token function\">zsh</span><span class=\"token variable\">)</span></span>\"</span>\n</span><span class=\"code-line\">  <span class=\"token builtin class-name\">source</span>  <span class=\"token variable\">$ZSH_CUSTOM</span>/plugins/fzf-tab-source/fzf-tab-source.plugin.zsh\n</span><span class=\"code-line\">  enable-fzf-tab\n</span></code></pre>\n<h2>Conclusion</h2>\n<p>With these plugins, I have a lightweight intelligent completion setup that doesn't slow down my machine. It didn't take long to setup and the results have been great.</p>\n<figure class=\"width--content\">\n  <img src=\"https://yowainwright.imgix.net/lightweight-intelligent-completion-in-zsh/fzf-tab\" alt=\"fzf tab in practice\">\n</figure>","slug":"lightweight-intelligent-completion-in-zsh"},"__N_SSG":true}