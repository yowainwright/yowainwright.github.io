{"pageProps":{"frontmatter":{"title":"Making a CSS Font Partial","meta":"Making a maintainable CSS font partial.","categories":["sass","css"],"date":"September 14, 2017","path":"/css-font-partial"},"content":"\nFonts and text styles are often managed along with other default styles by developers. Here is one way to create a font CSS partial using [BEMâ€”Block Element Modifier](http://getbem.com/).\n\n---\n\nIn the paragraphs below, a process for declaring font styles and defining them to specific elements optimally will be defined.\n\n## Define Font Partial\n\nTo clearly declare font styles, defining variables is important. In the code block below font family variables are defined using [Sass](http://sass-lang.com/) but this is similar to other CSS processes.\n\n```sass\n// declare fonts families\n$serif: 'Georgia', serif;\n$sansserif: 'Helvetica Neue', Helvetica, Arial, sans;\n$condensed: 'Impact';\n// declare fonts\n$text-large: normal 1.125rem/1.44 $sansserif;\n$text: normal .9375rem/1.33 $serif;\n$text-small: normal .875rem/1.43 $serif;\n```\n\nAfter general font styles are declared, css is written to modify them efficiently with cascade awareness. In the CSS block below, `.text` is the **block**. `__title` and `__cite` are **elements** that extend from the `.text` block. **Modifiers** are used to define `condensed` and `large` font modifications.\n\n```sass\n.text {\n  // `text` is the block\n  font: $text;\n  &--condensed {\n    // `condensed` modifies the `text` block\n    font-family: $condensed;\n  }\n  &--uppercase {\n    text-transform: uppercase;\n  }\n  &__title {\n    // `title` is an element of the `text` block\n    font: $text-large;\n    &--large {\n      // the `large` modifier can modify the `title` element\n      font-size: 2rem;\n    }\n  }\n  &__cite {\n    // the `` modifier can modify the `title` block\n    font: $text-small;\n  }\n}\n```\n\nWrite CSS as done above is purposeful. All styles are clearly nested within the `.text` block. This process provided the sense of cascade without causing the cascade to suffer as a result. Each selector compiles to 1 CSS class.\n\nThe compiles CSS looks like this (unminified)\n\n```sass\n.text {\n  font: $text;\n}\n.text--condensed {\n    font-family: $condensed;\n}\n.text--uppercase {\n  text-transform: uppercase;\n}\n.text__title {\n  font: $text-large;\n}\n.text__title--large {\n  font-size: 2rem;\n}\n.text__cite {\n  font: $text-small;\n}\n```\n\nWithin HTML, styles can be applied like this\n\n```sass\n<article>\n  <header>\n    <h2 class=\"text__title text__title--large\"></h2>\n    <p class=\"text__cite text--condensed\">Cite</p>\n  </header>\n  <p class=\"text\">Text</p>\n</article>\n\n```\n\nThe code above is descriptive and does not mess with CSS specificity. Important things to consider when using BEM are **block** naming, defining succinct **elements**, and CSS class character length. More details for those topics are outside of the scope of this post but can help writing text CSS.\n"},"__N_SSG":true}