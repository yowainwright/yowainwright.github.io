{"pageProps":{"frontmatter":{"title":"Using ES6 Function Destructuring with JavaScript Plugin Options","layout":"post","readNext":"/","meta":"This post explains how to use ES6 function destructuring for more readable JavaScript Plugin Options.","share_image":"https://yowainwright.imgix.net/icons/js.jpg","featured_image":null,"post_index":35,"categories":["html","code","javascript"],"date":"March 12, 2017","path":"/destructing-function-opts"},"content":"\nOpen source plugin code can become confusing. After writing a few open source plugins, I've realized that readability is very important to get help and make code better. One area where readability becomes confusing is options code. In this short post, I will go over options code in JavaScript Plugins and how it can be improved.\n\n## What are options?\n\n> Options, in JavaScript, are arguments passed in a function to replace default properties values.\n\nOptions, in JavaScript, are arguments passed in a function to replace default properties values. In example, sometimes a plugin will have a default CSS class that it is associated with. Plugins will often allow users to change this default CSS class.\n\nHere an example of how options look in JavaScript from ES5:\n\n```javaScript\nfunction someFunction(opts) {\n  var defaults = {\n    el: document.documentElement,\n    win: window,\n    attribute: 'data-some-attr'\n  };\n  var el = opts && opts.el || defaults.el;\n  var win = opts && opts.win || defaults.win;\n  var attribute = opts && opts.attribute || defaults.attribute;\n  // for exampe perposes\n  return console.log({\n    element: el,\n    document: win,\n    attr: attribute\n  });\n};\n```\n\nAnd here's how it can be changed when it is initiated:\n\n```javaScript\nsomeFunction({attribute: 'data-attr'});\n```\n\nThe _log_ will now look something like:\n\n```javaScript\n  Object: attr: \"data-attr\", document: Window, element: html\n```\n\n## Defined Options Is Confusing\n\nThe `options` code above is confusing! I mean, what the heck is going on here?\n```javaScript\nvar el = opts && opts.el || defaults.el;\n```\n\nThis code needs an `el` property. It says, defines the `el` property from `opts` (passed in from a function) or get the default `el` value. That's a lot of work to make sure that a property has a value.\n\n## Option Readability Can Be Improved With ES6\n\nES6, with function destructuring, allows us to make options code more readable.\n\nWith ES6, we can write this:\n\n```javaScript\nfunction someFunction({\n  el = document.documentElement,\n  win = window,\n  attribute = 'data-some-attr' } = {}) {\n  return console.log({\n    element: el,\n    document: win,\n    attr: attribute\n  });\n};\n```\n\nAnd then add any custom opts with:\n\n```javaScript\nsomeFunction({attribute: 'data-attr'});\n```\n\nThis trims down the reference to a property value to 2 times versus 3!\n\n## Conclusion\n\nWith ES6 function destructuring, options code is much cleaner and easier to read. As a result, Open Source Plugins that use this feature are easier to improve and understand.\n"},"__N_SSG":true}