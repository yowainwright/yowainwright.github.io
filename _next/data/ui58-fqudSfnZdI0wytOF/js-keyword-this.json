{"pageProps":{"frontmatter":{"title":"Javascript's keyword this; THIS is what I'm talking about!","layout":"post","readNext":"/","meta":"This post goes into Javascript's keyword this, how it is defined & why it is misunderstood","share_image":"https://yowainwright.imgix.net/icons/js.jpg","featured_image":null,"post_index":9,"categories":["javascript","code"],"date":"January 10, 2015","path":"/js-keyword-this"},"content":"\nThe _**this**_ keyword in Javascript is something that has often confused me, especial which object it is attached to. I've realized trying to explain it a few times that it's difficult to explain.\n\nThe _this_ keyword is a parameter that gets bound to an object. That parameter this is determined by how a function of method is called. It behaves almost exactly like a normal parameter.\n\nHere’s a list of what the keyword this is **not** bound to:\n\n-  the object created literal\n-  the function object it appears in\n-  a new function it appears in\n-  a object that has a function of the property\n-  the objects execution context\n\nKey’s to figuring out what the key work This will be bound to\n\n-  This gets bound to the object left of the dot (period, ‘.’)\n-  If the keyword new is used to create a new object This gets bound to that new object\n-  If there is not dot & no keyword this will get bound to the global object\n-  When using the .call() method another argument is passed in & This takes that value\n\nThe 4 ways this is initiated:\n\n-  In a function.\n\n```javascript\nfunction funcName() {};\n```\n\n-  In a method\n\n```javascript\nvar obj = {\n     funcName : function() {}\n}\n```\n\n-  As a constructor\n\n```javascript\n\nfunction myFunc(name) {\n  this.name = name;\n};\n\nvar newMyFunc = new myFunc('Jeff');\ndocument.write(myFunc.name);\n\n```\n\n- Using **.call();** or **.apply();** methods\n\n```javascript\nfunction juggle() {\n  var result = 0;\n  for (var n = 0; n < arguments.length; n++) {\n   result += arguments[n];\n  }\n  this.result = result;\n};\n\nvar ninja1 = {};\nvar ninja2 = {};\n\njuggle.apply(ninja1, [1, 2, 3, 4]);\njuggle.call(ninja2, 5, 6, 7, 8);\n\n```\n\n**example:**\n\n```javascript\nvar fn = function(one, two) {\n    log(one, two);\n};\n\nvar r = {},\n    g = {},\n    b = {};\n\nr.method = fn; // This gets bound to r\nr.method(g, b); // This gets bound to r\nfn(g, b); // This gets bound to the global object\nfn.call(r, g, b); // This gets bound to r\n```\n\nAfter looking at the _this_ key word in a bunch of ways, the best way to describe the _this_ parameter is to say that it is a powerful tool to reference the object that your working with. The only thing to make sure of if you're confused about what 'this' is put it in a `console.log()` so `console.log(this);`.\n"},"__N_SSG":true}