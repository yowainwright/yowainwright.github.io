{"pageProps":{"frontmatter":{"title":"Understanding the basics parts of a CLI command","meta":"This brief article digs into the basics of most CLI commands including a summary of the commands's name, arguments, options, and actions.","categories":["code","javascript"],"date":"January 19, 2022","path":"/cli-program-basic-parts"},"content":"<p>Many people that have done semi-technical computer work have seen, used, or made a CLI command.</p>\n<p>This post goes into the basics of most CLI commands.\nI decided to write this post after realizing that thinking about the basics of a CLI command has helped me use and make them more effectively.</p>\n<hr>\n<h2>Definition of a CLI program</h2>\n<p>By definition, a CLI (Command Line Interface) command is a program designed to run from a command line.\nThis means that the command is designed to be run in a terminal application and not in a web browser or GUI (graphical user interface) application.</p>\n<p>I think of a CLI as short sentence of intructions written to be easy for a computer to understand but still readable for humans too.</p>\n<h2>Parts of a CLI Command</h2>\n<p>CLIs use keyword/phrases/acronyms to define how the command is to be executed.\nAt the bare minimum, there's the CLI command name and the action the command runs.</p>\n<p>CLI commands mainly consist of 3 parts.</p>\n<ol>\n<li>The <code>name</code> of the CLI</li>\n<li>THe <code>arguments</code> it takes</li>\n<li>The <code>options</code> it takes</li>\n</ol>\n<p>This is what it looks like to run a CLI command</p>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\"><span class=\"token operator\">&#x3C;</span>name<span class=\"token operator\">></span> <span class=\"token operator\">&#x3C;</span>argument<span class=\"token operator\">></span> --<span class=\"token operator\">&#x3C;</span>option<span class=\"token operator\">></span> <span class=\"token operator\">&#x3C;</span>optional-option-input<span class=\"token operator\">></span> --<span class=\"token operator\">&#x3C;</span>option<span class=\"token operator\">></span>\n</span><span class=\"code-line\"><span class=\"token comment\"># note: if an option is passed in without an option input, it will be interpreted as a boolean</span>\n</span></code></pre>\n<p>The invisible but most important part of a CLI command is its action.\nThe CLI command action is a function that get invoked when a CLI command is executed.\nActions take in CLI command <code>arguments</code> and/or <code>options</code> as function arguments.</p>\n<p>Let's explore the parts of a CLI command more below!</p>\n<h2>Name</h2>\n<p>CLI commands always have a name! By entering in only a CLI's name, if a CLI is defined, it should execute.</p>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\">$ <span class=\"token operator\">&#x3C;</span>cli-name<span class=\"token operator\">></span>\n</span><span class=\"code-line\"><span class=\"token comment\"># ie => npm</span>\n</span><span class=\"code-line\"><span class=\"token comment\"># executes a log listing of npm commands</span>\n</span></code></pre>\n<h2>Arguments</h2>\n<p>Arguments are keywords passed into a CLI to define how the CLI should be run.\nArguments are required parameters.</p>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\">$ <span class=\"token operator\">&#x3C;</span>cli-name<span class=\"token operator\">></span> <span class=\"token operator\">&#x3C;</span>cli-argument<span class=\"token operator\">></span>\n</span><span class=\"code-line\"><span class=\"token comment\"># ie => npm init</span>\n</span><span class=\"code-line\"><span class=\"token comment\"># prompts to setup a `package.json` file</span>\n</span></code></pre>\n<h2>Options</h2>\n<p>Options are optional arguments that can be passed into a CLI.\nOptions are optional parameters.</p>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\">$ <span class=\"token operator\">&#x3C;</span>cli-name<span class=\"token operator\">></span> <span class=\"token operator\">&#x3C;</span>cli-argument<span class=\"token operator\">></span> --<span class=\"token operator\">&#x3C;</span>option<span class=\"token operator\">></span> <span class=\"token operator\">&#x3C;</span>optional-option-input<span class=\"token operator\">></span>\n</span><span class=\"code-line\"><span class=\"token comment\"># ie => npm install --save-dev lodash</span>\n</span><span class=\"code-line\"><span class=\"token comment\"># installs lodash as a dev dependency</span>\n</span></code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\">$ <span class=\"token operator\">&#x3C;</span>cli-name<span class=\"token operator\">></span> <span class=\"token operator\">&#x3C;</span>cli-argument<span class=\"token operator\">></span> --<span class=\"token operator\">&#x3C;</span>option<span class=\"token operator\">></span>\n</span><span class=\"code-line\"><span class=\"token comment\"># ie => npm install --frozen-lockfile</span>\n</span><span class=\"code-line\"><span class=\"token comment\"># installs the frozen lockfile</span>\n</span></code></pre>\n<h2>Actions</h2>\n<p>Actions consist of the code that is executed when a CLI is run.\nActions are functions which take in the CLIs arguments and options which define how the CLI should be run.</p>\n<p>Here's an example of CLI command with its action above it:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript code-highlight\"><span class=\"code-line\"><span class=\"token operator\">!</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>env node\n</span><span class=\"code-line\"><span class=\"token comment\">// ^ Used to specify how the file is to be executed</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> program <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commander\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../package.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> script <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Options <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./types\"</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">/**\n</span></span><span class=\"code-line\"><span class=\"token comment\"> * action\n</span></span><span class=\"code-line\"><span class=\"token comment\"> * @param {Options} options\n</span></span><span class=\"code-line\"><span class=\"token comment\"> */</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> Options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> config <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">const</span> urls <span class=\"token operator\">=</span> options<span class=\"token operator\">?.</span>urls <span class=\"token operator\">||</span> config<span class=\"token operator\">?.</span>urls <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">  <span class=\"token function\">script</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> urls <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">program\n</span><span class=\"code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list all script tag srcs on a webpage from a given url\"</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-u, --urls [urls...]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"urls of script sources\"</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-c, --config &#x3C;config>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"config file to use\"</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">action</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n<h2>Some nuances of CLI commands</h2>\n<p>While writing this blog post, I realized there were some subtle nuances that might be useful to clarify regarding CLI command arguments.</p>\n<p>In example, with popular npm CLI:</p>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n</span><span class=\"code-line\"><span class=\"token comment\"># installs all dependencies</span>\n</span></code></pre>\n<p>While</p>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> lodash --save-dev\n</span><span class=\"code-line\"><span class=\"token comment\"># installs lodash as a dev dependency</span>\n</span></code></pre>\n<p>But</p>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> lodash\n</span><span class=\"code-line\"><span class=\"token comment\"># only installs all previously installed dependencies (not lodash!)</span>\n</span></code></pre>\n<p>This is because the command above doesn't have the <code>--save-dev</code> or <code>--save</code> boolean argument to declare where the <code>lodash</code> dependency should be installed!\nThe CLI command, therefore, reads to the computer what it can read—aka <code>npm install</code>!</p>\n<p>This is <em>really</em> confusing but the general principle remains the same.</p>\n<h2>Final thoughts</h2>\n<p>Taking the time to understand the basic parts of a CLI command is powerful thing keep in mind.\nMost things done with code are accompanied by CLI commands to optimize their use.\nBy being able to leverage and understand CLI commands, users can traverse across many technical landscapes and programming language.</p>\n<hr>\n<p>I've written several CLIs for various jobs. My most used open source CLI is <a href=\"https://www.npmjs.com/package/es-check\">es-check</a>.\nI still have a lot to learn so please reach out if you observe something I've written that could be improved.</p>\n<p>Happy Hacking!</p>","slug":"cli-program-basic-parts"},"__N_SSG":true}