{"pageProps":{"frontmatter":{"title":"TypeScript Init—Getting A Test Driven TypeScript Repository Setup","meta":"This post documents getting setup with TypeScript—just beyond the Gettings Started TypeScript Tutorials. In this Post I will go through setting up a Test Driven TypeScript project.","categories":["note","story"],"date":"May 2, 2018","path":"/getting-setup-with-ts"},"content":"<p>The Engineering Team at Dollar Shave Club is excited about <a href=\"https://github.com/Microsoft/TypeScript\">TypeScript</a>. I'm excited too. When I started writing this post, I was not familiar with TypeScript beyond conversations and TypeScript's <a href=\"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\">getting started tutorials</a>. In this post, I documented getting a TypeScript repository setup to compile, lint, and test TypeScript. While writing this post, I built a <a href=\"https://github.com/yowainwright/datastructures-ts/tree/master/packages/linked-list\">Linked List</a> in TypeScript.</p>\n<h2>Tool Decisions</h2>\n<p>For this TypeScript exercise, I tried to use the same tools I'd use to build a plain old open source JavaScript repository—except in TypeScript.</p>\n<p>In the table below I broke down the tools I tried to build my first Test Drive Development TypeScript repository.</p>\n<p>| Category     | Initial    | Final            | Reason                                                                                                                                                          |\n| ------------ | ---------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Build        | Rollup     | TypeScript (TSC) | Rollup worked with minimal effort. I am user TSC because it means 1 less layer of abstraction.                                                                  |\n| Type Checker | TypeScript | TypeScript       | TypeScript works well. The feedback in VS Code is immediate and offers clear messaging.                                                                         |\n| Testing      | TS-Jest    | TS-Jest          | I was concerned about using TS-Jest because the documentation between it and Jest seemed confusing but it worked. I'm familiar with Jest so the switch was easy |\n| Linting      | TS-Lint    | TS-Lint          | TS-Lint works well in VS Code. As far as the CLI, I'm still not clear if TS-Lint is working.                                                                    |</p>\n<h3>Why I used TypeScript's Compiler?</h3>\n<p>I initially setup TypeScript with Rollup. Rollup was compiling fine. It seemed like another layer of abstraction. To simplify the amount of configuration, I decided to use TypeScript's compiler.</p>\n<h3>TS compiler options</h3>\n<p>Listed below are some options for compiling TypeScript:</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\">TSC</a>—TypeScript's Compiler</li>\n<li><a href=\"https://github.com/TypeStrong/ts-loader\">Webpack using TS-loader</a>—Webpack's abstraction of TS compilation</li>\n<li><a href=\"https://rollupjs.org/guide/en#typescript-declarations\">Rollup</a>—Rollup compiles TS automatically</li>\n</ul>\n<h3>Jest Testing and Linting—in TypeScript</h3>\n<p>The Dollar Shave Club team uses <a href=\"https://facebook.github.io/jest/\">Jest</a> for unit testing. Dollar Shave Club's standard is for TypeScript projects is to test with <a href=\"https://github.com/kulshekhar/ts-jest\">TS-Jest</a>. Using TS-Jest initially seemed scary but worked without problems. First I added the standard <code>expect(1).toBe(1)</code> test to ensure that my paths to unit tests were correct. Then I followed up with another quick test to ensure that my <code>.ts</code> files were imported correctly. From there, I added tests as I would writing Jest.</p>\n<p>For linting, I used <a href=\"https://palantir.github.io/tslint/\">TS-Lint</a> which extends <a href=\"https://eslint.org/\">ESLint</a>. This took little time. I imported TS-Lint, added some configuration and a npm script—that was it. From there I was getting TypeScript Linting Feedback.</p>\n<p>I added <a href=\"http://usejsdoc.org/\">JSDocs</a> so that I could make sure to document what the heck I was doing.</p>\n<h3>Setting up tests with TS Jest</h3>\n<p>Listed below are steps to get <a href=\"https://github.com/kulshekhar/ts-jest\">ts-jest</a> up and running:</p>\n<h3>Tests are working and I'm still alive</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Node</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../Node'</span>\n</span><span class=\"code-line\"><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<h3>Files are importing correctly</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Node</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../Node'</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jest is working, Node is imported'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token maybe-class-name\">Node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<h3>Define the testing interface</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\">declare <span class=\"token keyword\">function</span> <span class=\"token function\">test</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Function</span></span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">declare <span class=\"token keyword\">function</span> <span class=\"token function\">expect</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">result</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Node</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../Node'</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jest is working, Node is imported'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token maybe-class-name\">Node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span></code></pre>\n<h3>JSDocs</h3>\n<p>Listed below are general comment examples for <a href=\"http://usejsdoc.org/\">JSDocs</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\">\n</span><span class=\"code-line\">  <span class=\"token spread operator\">...</span>\n</span><span class=\"code-line\">  <span class=\"token doc-comment comment\">/**\n</span></span><span class=\"code-line\"><span class=\"token doc-comment comment\">   * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">value</span>\n</span></span><span class=\"code-line\"><span class=\"token doc-comment comment\">   * adds a new node to the beginning of the linkedList\n</span></span><span class=\"code-line\"><span class=\"token doc-comment comment\">   */</span>\n</span><span class=\"code-line\">  <span class=\"token function\">addFirstNode</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">headNode</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">headNode</span>\n</span><span class=\"code-line\">      <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">headNode</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getNodeValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">      <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">nodeCount</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">nodeCount</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">  <span class=\"token spread operator\">...</span>\n</span><span class=\"code-line\">\n</span></code></pre>\n<h2>Problems I had getting started with TypeScript</h2>\n<p>I knew there were benefits to be had because some of my team had taken on TypeScript full on. That stated, I did have some frustrations getting setup. I don't know if I would have pushed through the few hours of frustration for myself had I not had teammate support. I'd like to think I would have.</p>\n<h3>Here are some problems I had getting started</h3>\n<p>Listed below are problems I had getting started with TypeScript:</p>\n<ul>\n<li>I had problems reading the TypeScript messages in VSCode</li>\n<li>I had errors issues with imports in my tests (I spent a lot of time being frustrated here)</li>\n<li>Sometimes I have to refresh VSCode after I've made minor changes to see if errors are actual errors</li>\n</ul>\n<h3>Here are some problems with solutions</h3>\n<p>My tests globals are undefined and TypeScript barks at that.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\">\n</span><span class=\"code-line\">declare <span class=\"token keyword\">function</span> <span class=\"token function\">test</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Function</span></span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">declare <span class=\"token keyword\">function</span> <span class=\"token function\">expect</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">result</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">// or create a setupJest.js file</span>\n</span><span class=\"code-line\">\n</span></code></pre>\n<h3>I can't read VSCode errors.</h3>\n<blockquote>\n<p>Try running TSlint => the messaging is similar. The usage of node's <a href=\"https://github.com/chalk/chalk\">chalk</a> in the commandline can help highlight issues.</p>\n</blockquote>\n<h3>How do I \"tsconfig.json\"?</h3>\n<blockquote>\n<p>Try something like this:</p>\n</blockquote>\n<pre class=\"language-json\"><code class=\"language-json code-highlight\"><span class=\"code-line\"><span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/components\"</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"es2016.array.include\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"es2017\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"**/__tests__/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"**/*.ts\"</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<h3>How do I \"tsconfig.jest.json\"?</h3>\n<blockquote>\n<p>Try something like this:</p>\n</blockquote>\n<pre class=\"language-json\"><code class=\"language-json code-highlight\"><span class=\"code-line\"><span class=\"token comment\">// from package.json</span>\n</span><span class=\"code-line\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"@types/jest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^22.2.3\"</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"jest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^22.4.3\"</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    ...\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">  <span class=\"token property\">\"jest\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"transform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">      <span class=\"token property\">\"^.+\\\\.ts?$\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-jest\"</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"testRegex\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(ts?)$\"</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"moduleFileExtensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n</span><span class=\"code-line\">      <span class=\"token string\">\"ts\"</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">\n</span></code></pre>\n<h3>How do I <a href=\"https://github.com/palantir/tslint\">ts lint</a>?</h3>\n<pre class=\"language-json\"><code class=\"language-json code-highlight\"><span class=\"code-line\"><span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"tslint-config-dollarshaveclub\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"no-unnecessary-type-assertion\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"trailing-comma\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"semicolon\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<h3>How do I compile my ts?</h3>\n<pre class=\"language-json\"><code class=\"language-json code-highlight\"><span class=\"code-line\">\n</span><span class=\"code-line\"> ...\n</span><span class=\"code-line\"> <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build:ts\"</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"build:ts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">  ...\n</span><span class=\"code-line\">\n</span></code></pre>\n<h3>I do React. What does TS with React look like?</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">StatelessComponent</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n</span><span class=\"code-line\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">classNames</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'classnames'</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Crumb</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  active<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean\n</span><span class=\"code-line\">  empty<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean\n</span><span class=\"code-line\">  <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> string\n</span><span class=\"code-line\">  link<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">BreadcrumbsProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Readonly</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token literal-property property\">crumbs</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Crumb</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">  className<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string\n</span><span class=\"code-line\">  style<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">Breadcrumb</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">StatelessComponent</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Crumb</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n</span></span><span class=\"code-line\"><span class=\"token parameter\">  active <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n</span></span><span class=\"code-line\"><span class=\"token parameter\">  empty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n</span></span><span class=\"code-line\"><span class=\"token parameter\">  label<span class=\"token punctuation\">,</span>\n</span></span><span class=\"code-line\"><span class=\"token parameter\">  link <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n</span></span><span class=\"code-line\"><span class=\"token parameter\"><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">const</span> crumbClasses <span class=\"token operator\">=</span> <span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span>\n</span><span class=\"code-line\">    <span class=\"token string\">'ui-breadcrumbs-small__crumb'</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token string\">'ui-text--md'</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token string\">'ui-color--paper-darkest'</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'ui-breadcrumbs-small__crumb--active'</span><span class=\"token operator\">:</span> active <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token keyword control-flow\">return</span> empty\n</span><span class=\"code-line\">    <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span>li className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>crumbClasses<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">    <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n</span><span class=\"code-line\">      <span class=\"token operator\">&#x3C;</span>li className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>crumbClasses<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n</span><span class=\"code-line\">        <span class=\"token punctuation\">{</span>link <span class=\"token operator\">?</span> <span class=\"token operator\">&#x3C;</span>a href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>link<span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token string\">'ui-link ui-link--inherit-color'</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&#x3C;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">      <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">BreadcrumbsSmall</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">StatelessComponent</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">BreadcrumbsProps</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n</span></span><span class=\"code-line\"><span class=\"token parameter\">  crumbs<span class=\"token punctuation\">,</span>\n</span></span><span class=\"code-line\"><span class=\"token parameter\">  className<span class=\"token punctuation\">,</span>\n</span></span><span class=\"code-line\"><span class=\"token parameter\">  style<span class=\"token punctuation\">,</span>\n</span></span><span class=\"code-line\"><span class=\"token parameter\"><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token keyword\">const</span> inputLabelClass <span class=\"token operator\">=</span> <span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span>\n</span><span class=\"code-line\">    <span class=\"token string\">'ui-breadcrumbs-small'</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token string\">'ui-list--plain'</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>className <span class=\"token keyword module\">as</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>className <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n</span><span class=\"code-line\">    <span class=\"token operator\">&#x3C;</span>ul className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputLabelClass<span class=\"token punctuation\">}</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n</span><span class=\"code-line\">      <span class=\"token punctuation\">{</span>crumbs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> active<span class=\"token punctuation\">,</span> empty<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> link <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Breadcrumb</span> active<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>active<span class=\"token punctuation\">}</span> empty<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>empty<span class=\"token punctuation\">}</span> label<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span> link<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>link<span class=\"token punctuation\">}</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">BreadcrumbsSmall</span>\n</span><span class=\"code-line\">\n</span></code></pre>\n<h3>I want to export/import Plain Old JavaScript. Can I do that?</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript code-highlight\"><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">stickybits</span><span class=\"token punctuation\">(</span>\n</span><span class=\"code-line\">  <span class=\"token parameter\"><span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token maybe-class-name\">Element</span> <span class=\"token operator\">|</span> <span class=\"token maybe-class-name\">Element</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</span></span><span class=\"code-line\"><span class=\"token parameter\">  options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">StickyBits</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Options</span></span><span class=\"token punctuation\">,</span></span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">StickyBits</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StickyBits</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token function-variable function\">cleanup</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">void</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword module\">export</span> namespace <span class=\"token maybe-class-name\">StickyBits</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token keyword module\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Options</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    customStickyChangeNumber<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> <span class=\"token keyword null nil\">null</span>\n</span><span class=\"code-line\">    noStyles<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean\n</span><span class=\"code-line\">    stickyBitStickyOffset<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number\n</span><span class=\"code-line\">    parentClass<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string\n</span><span class=\"code-line\">    scrollEl<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Element</span>\n</span><span class=\"code-line\">    stickyClass<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string\n</span><span class=\"code-line\">    stuckClass<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string\n</span><span class=\"code-line\">    stickyChangeClass<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string\n</span><span class=\"code-line\">    useStickyClasses<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean\n</span><span class=\"code-line\">    verticalPosition<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'top'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'bottom'</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span></code></pre>\n<h3>I want to work on a project that imports and exports TS or JS</h3>\n<blockquote>\n<p>Try something like this:</p>\n</blockquote>\n<h3>tsconfig.json</h3>\n<pre class=\"language-json\"><code class=\"language-json code-highlight\"><span class=\"code-line\"><span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"exnext\"</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"es2016.array.include\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"es2017\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span>\n</span><span class=\"code-line\">  <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<h3>package.json</h3>\n<pre class=\"language-json\"><code class=\"language-json code-highlight\"><span class=\"code-line\">\n</span><span class=\"code-line\">...\n</span><span class=\"code-line\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">  <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&#x3C;your js build> &#x26;&#x26; tsc\"</span><span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">  ...\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">...\n</span><span class=\"code-line\">\n</span></code></pre>\n<p>The solutions above are/were provided by me. I'm am newer to TypeScript. Use with caution but without fear or blame.</p>\n<h2>Conclusion: Why I will be using Types as much as possible</h2>\n<p>I'm not a rocket scientist—far from it. When writing code, I want feedback as quickly as possible as much as possible. After learning how continuous integration, linting and test driven development could help me improve, wanting more support from tools like TypeScript is a no brainer. TypeScript, I've found has not only helped me define Types but it also helps me break down code—making it simpler.</p>","slug":"getting-setup-with-ts"},"__N_SSG":true}