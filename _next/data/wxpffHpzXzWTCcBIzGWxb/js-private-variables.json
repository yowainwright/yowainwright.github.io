{"pageProps":{"frontmatter":{"title":"Creating private information in JavaScript","layout":"post","readNext":"/","path":"/js-private-information/","meta":"Creating a private information in JavaScript to be used in future functions","share_image":"https://yowainwright.imgix.net/icons/js.jpg","featured_image":null,"post_index":10,"categories":["code","javascript","objects"],"date":"January 22, 2015"},"content":"\nCreating private information, meaning variables, properties/property values, function, methods in JavaScript is an important concept for storing information that can't be overwritten.\n\n## What does _private_ mean?\n\n[Private](//javascript.crockford.com/private.html) means that only the current function (_class_) will have access to the variables (_properties/ property values_), functions (_methods_) within it. This is very important to make sure that your code is not overwritten.\n\n## _Public_ vs _Private_\n\n- Public variables or functions can be added to, modified, or deleted.\n- Private variables or functions can't be changed.\n\n## A recent code challenge\n\nThis concept is still pretty new to me so my boss gave me the task of writing some functions that would iterate on a number so that:\n\n-  there would be 3 functions that would be aware of each other & each function would add 1.\n-  there would then be a global variable that would be declared that would call 1 of the functions\n-  then there would be another parent function that would call the 2nd original function\n-  within that parent function there would be another child function that would call the 3rd function & log the value for the 3 original functions\n-  within that parent function, after the child function - the child function would be called twice.\n-  after then closing of the parent function, the parent function would be called three times\n\n```javascript\n\nvar num = 1;\n\nvar aHero = function() {\n  return num++;\n};\nvar aDeed = function() {\n  return num++;\n};\n\nvar aFoil = function() {\n  return num++;\n};\n\nvar log = function(text) {\n  $('#logArea').append('<div>' + text + '</div>');\n}\n\nvar hero = aHero();\nvar newSaga = function() {\n  var foil = aFoil();\n  var saga = function() {\n    var deed = aDeed();\n    log(hero + ' ' + deed + ' ' + foil);\n  }\n  saga();\n  saga();\n};\nnewSaga();\nnewSaga();\n```\n\n**Which renders the result of:**\n\n```javascript\n1 3 2\n1 4 2\n1 6 5\n1 7 5\n```\n\nAfter a little understand of the concept for the above task, I was able to render the result fairly easily. Then my boss threw in what he called a wrinkle. He put in a check that sets `num` to be the letter `a`.\n\n```javascript\nvar theNumber = 1;\n\nvar aHero = function() {\n  return theNumber++;\n};\nvar aDeed = function() {\n  return theNumber++;\n};\n\nvar aFoil = function() {\n  return theNumber++;\n};\n\nvar log = function(text) {\n  $('#logArea').append('<div>' + text + '</div>');\n}\n\nvar hero = aHero();\nvar newSaga = function() {\n  var foil = aFoil();\n  var saga = function() {\n  \tif( typeof num !== 'undefined') {\n      num = 'a';\n    }\n    var deed = aDeed();\n    log(hero + ' ' + deed + ' ' + foil);\n  }\n  saga();\n  saga();\n};\nnewSaga();\nnewSaga();\n```\n\n**The code abe renders this result:**\n\n```javascript\nNaN NaN NaN\nNaN NaN NaN\nNaN NaN NaN\nNaN NaN NaN\nNaN NaN NaN\n```\n\nMy boss then asked me to, without changing anything inside of the parent, `NewSaga()` function, render the original result which was honestly very challenging for me.\n\nThis is what I came up with with some help.\n\n```javascript\nvar incrementProvider = function() {\n  var num = 1;\n  var addTheNumber = function() {\n    var result = num;\n    num = num + 1;\n    return result;\n  };\n  return addTheNumber;\n};\n\nvar theNumber = incrementProvider();\n\nvar aHero = function() {\n  return theNumber();\n};\nvar aDeed = function() {\n  return theNumber();\n};\n\nvar aFoil = function() {\n  return theNumber();\n};\n\nvar log = function(text) {\n  $('#logArea').append('<div>' + text + '</div>');\n}\n\nvar hero = aHero();\nvar newSaga = function() {\n  var foil = aFoil();\n  var saga = function() {\n    if( typeof num !== 'undefined') {\n      num = 'a';\n    }\n    var deed = aDeed();\n    log(hero + ' ' + deed + ' ' + foil);\n  }\n  saga();\n  saga();\n};\nnewSaga();\nnewSaga();\n```\n\nLive [code](//codepen.io/yowainwright/pen/14c4a193a20462b0b7c23a8b3128bc2d)\n\n**And this is what my boss came up with:**\n\n```javascript\nvar GeneratorClass = function() {\n  var inside = 1;\n  var numberGenerator = function() {\n    return (inside++).toString();\n  }\n  return {numberGenerator: numberGenerator};\n};\n\nvar generator = new GeneratorClass();\nvar aHero = generator.numberGenerator;\nvar aDeed = generator.numberGenerator;\nvar aFoil = generator.numberGenerator;\n\n//var aHero = (new GeneratorClass()).numberGenerator;\n//var aDeed = (new GeneratorClass()).numberGenerator;\n//var aFoil = (new GeneratorClass()).numberGenerator;\n\nvar log = function(text) {\n  $('#logArea').append('<div>' + text + '</div>');\n}\n\nvar hero = aHero();\nvar newSaga = function() {\n  var foil = aFoil();\n  var saga = function() {\n    if( typeof num !== 'undefined') {\n      num = 'a';\n    }\n    var deed = aDeed();\n    log(hero + ' ' + deed + ' ' + foil);\n  }\n  saga();\n  saga();\n};\nnewSaga();\nnewSaga();\n```\n\nLive [code](http://codepen.io/scottlaplante/pen/RryKEe)\n\nBoth examples render the same result but my boss's code is much cleaner I think.\n\nThis project was given to me after doing Udacity's [OOP JavaScript class](//www.udacity.com/course/object-oriented-javascript--ud015). It's been interesting after reviewing the class with my boss how much I thought I understood versus how much I actually do in practice.\n\nWelp, back to coding ...\n\n\n\n\n\n\n\n\n\n\n\n\n"},"__N_SSG":true}