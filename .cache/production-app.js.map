{"version":3,"sources":["../../src/cache-dir/production-app.js"],"names":["window","___emitter","addPagesArray","addProdRequires","asyncRequires","___loader","matchPath","length","require","navigateTo","location","pathname","eventHandler","e","page","path","getPage","off","clearTimeout","timeoutId","___history","push","setTimeout","emit","getResourcesForPathname","on","___navigateTo","history","action","attachToHistory","listen","shouldUpdateScroll","prevRouterProps","results","oldPathname","AltRouter","DefaultRouter","children","loadLayout","layouts","err","executeChunk","module","cb","props","Root","layout","render","routeProps","layoutProps","NewRoot","document","getElementById"],"mappings":"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","file":"production-app.js","sourcesContent":["import apiRunner from \"./api-runner-browser\"\n\nimport React, { createElement } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport {\n  BrowserRouter as Router,\n  Route,\n  withRouter,\n  matchPath,\n} from \"react-router-dom\"\nimport { ScrollContext } from \"react-router-scroll\"\nimport createHistory from \"history/createBrowserHistory\"\n// import invariant from \"invariant\"\nimport emitter from \"./emitter\"\nwindow.___emitter = emitter\n// emitter.on(`*`, (type, e) => console.log(`emitter`, type, e))\n\nimport pages from \"./pages.json\"\nimport ComponentRenderer from \"./component-renderer\"\nimport asyncRequires from \"./async-requires\"\nimport loader from \"./loader\"\nloader.addPagesArray(pages)\nloader.addProdRequires(asyncRequires)\nwindow.asyncRequires = asyncRequires\n\nwindow.___loader = loader\n\nwindow.matchPath = matchPath\n\n// Let the site/plugins run code very early.\napiRunner(`onClientEntry`)\n\n// Let plugins register a service worker. The plugin just needs\n// to return true.\nif (apiRunner(`registerServiceWorker`).length > 0) {\n  require(`./register-service-worker`)\n}\n\nconst navigateTo = pathname => {\n  // If we're already at this path, do nothing.\n  if (window.location.pathname === pathname) {\n    return\n  }\n\n  // Listen to loading events. If page resources load before\n  // a second, navigate immediately.\n  function eventHandler(e) {\n    if (e.page.path === loader.getPage(pathname).path) {\n      emitter.off(`onPostLoadPageResources`, eventHandler)\n      clearTimeout(timeoutId)\n      window.___history.push(pathname)\n    }\n  }\n\n  // Start a timer to wait for a second before transitioning and showing a\n  // loader in case resources aren't around yet.\n  const timeoutId = setTimeout(() => {\n    emitter.off(`onPostLoadPageResources`, eventHandler)\n    emitter.emit(`onDelayedLoadPageResources`, { pathname })\n    window.___history.push(pathname)\n  }, 1000)\n\n  if (loader.getResourcesForPathname(pathname)) {\n    // The resources are already loaded so off we go.\n    clearTimeout(timeoutId)\n    window.___history.push(pathname)\n  } else {\n    // They're not loaded yet so let's add a listener for when\n    // they finish loading.\n    emitter.on(`onPostLoadPageResources`, eventHandler)\n  }\n}\n\n// window.___loadScriptsForPath = loadScriptsForPath\nwindow.___navigateTo = navigateTo\n\nconst history = createHistory()\n\n// Call onRouteUpdate on the initial page load.\napiRunner(`onRouteUpdate`, {\n  location: history.location,\n  action: history.action,\n})\n\nfunction attachToHistory(history) {\n  if (!window.___history) {\n    window.___history = history\n\n    history.listen((location, action) => {\n      apiRunner(`onRouteUpdate`, { location, action })\n    })\n  }\n}\n\nfunction shouldUpdateScroll(prevRouterProps, { location: { pathname } }) {\n  const results = apiRunner(`shouldUpdateScroll`, {\n    prevRouterProps,\n    pathname,\n  })\n  if (results.length > 0) {\n    return results[0]\n  }\n\n  if (prevRouterProps) {\n    const { location: { pathname: oldPathname } } = prevRouterProps\n    if (oldPathname === pathname) {\n      return false\n    }\n  }\n  return true\n}\n\nconst AltRouter = apiRunner(`replaceRouterComponent`, { history })[0]\nconst DefaultRouter = ({ children }) =>\n  <Router history={history}>\n    {children}\n  </Router>\n\nconst loadLayout = cb => {\n  if (asyncRequires.layouts[`index`]) {\n    asyncRequires.layouts[`index`]((err, executeChunk) => {\n      const module = executeChunk()\n      cb(module)\n    })\n  } else {\n    cb(props =>\n      <div>\n        {props.children()}\n      </div>\n    )\n  }\n}\n\nloadLayout(layout => {\n  loader.getResourcesForPathname(window.location.pathname, () => {\n    const Root = () =>\n      createElement(\n        AltRouter ? AltRouter : DefaultRouter,\n        null,\n        createElement(\n          ScrollContext,\n          { shouldUpdateScroll },\n          createElement(withRouter(layout), {\n            children: layoutProps =>\n              createElement(Route, {\n                render: routeProps => {\n                  attachToHistory(routeProps.history)\n                  const props = layoutProps ? layoutProps : routeProps\n                  if (loader.getPage(props.location.pathname)) {\n                    return createElement(ComponentRenderer, { ...props })\n                  } else {\n                    return createElement(ComponentRenderer, {\n                      location: { pathname: `/404.html` },\n                    })\n                  }\n                },\n              }),\n          })\n        )\n      )\n\n    const NewRoot = apiRunner(`wrapRootComponent`, { Root }, Root)[0]\n    ReactDOM.render(\n      <NewRoot />,\n      typeof window !== `undefined`\n        ? document.getElementById(`___gatsby`)\n        : void 0\n    )\n  })\n})\n"]}