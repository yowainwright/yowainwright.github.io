{"version":3,"sources":["../../src/cache-dir/prefetcher.js"],"names":["module","exports","getNextQueuedResources","createResourceDownload","pagesLoading","resourcesDownloading","startResourceDownloading","nextResource","push","reducer","action","type","filter","r","payload","path","p","page","setTimeout","length","onResourcedFinished","event","onPreLoadPageResources","onPostLoadPageResources","onNewResourcesAdded","getState","empty"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,gBAAwD;AAAA,MAArDC,sBAAqD,QAArDA,sBAAqD;AAAA,MAA7BC,sBAA6B,QAA7BA,sBAA6B;;AACvE,MAAIC,eAAe,EAAnB;AACA,MAAIC,uBAAuB,EAA3B;;AAEA;AACA,MAAMC,2BAA2B,SAA3BA,wBAA2B,GAAM;AACrC,QAAMC,eAAeL,wBAArB;AACA,QAAIK,YAAJ,EAAkB;AAChBF,2BAAqBG,IAArB,CAA0BD,YAA1B;AACAJ,6BAAuBI,YAAvB;AACD;AACF,GAND;;AAQA,MAAME,UAAU,SAAVA,OAAU,SAAU;AACxB,YAAQC,OAAOC,IAAf;AACE;AACEN,+BAAuBA,qBAAqBO,MAArB,CACrB;AAAA,iBAAKC,MAAMH,OAAOI,OAAlB;AAAA,SADqB,CAAvB;AAGA;AACF;AACEV,qBAAaI,IAAb,CAAkBE,OAAOI,OAAP,CAAeC,IAAjC;AACA;AACF;AACEX,uBAAeA,aAAaQ,MAAb,CAAoB;AAAA,iBAAKI,MAAMN,OAAOI,OAAP,CAAeG,IAAf,CAAoBF,IAA/B;AAAA,SAApB,CAAf;AACA;AACF;AACE;AAbJ;;AAgBA;AACA;AACAG,eAAW,YAAM;AACf,UAAIb,qBAAqBc,MAArB,KAAgC,CAAhC,IAAqCf,aAAae,MAAb,KAAwB,CAAjE,EAAoE;AAClE;AACAb;AACD;AACF,KALD,EAKG,CALH;AAMD,GAzBD;;AA2BA,SAAO;AACLc,yBAAqB,oCAAS;AAC5B;AACA;AACAX,cAAQ,EAAEE,yBAAF,EAA6BG,SAASO,KAAtC,EAAR;AACD,KALI;AAMLC,4BAAwB,uCAAS;AAC/B;AACA;AACAb,cAAQ,EAAEE,kCAAF,EAAsCG,SAASO,KAA/C,EAAR;AACD,KAVI;AAWLE,6BAAyB,wCAAS;AAChC;AACA;AACAd,cAAQ,EAAEE,mCAAF,EAAuCG,SAASO,KAAhD,EAAR;AACD,KAfI;AAgBLG,yBAAqB,+BAAM;AACzB;AACA;AACAf,cAAQ,EAAEE,8BAAF,EAAR;AACD,KApBI;AAqBLc,cAAU,oBAAM;AACd,aAAO,EAAErB,0BAAF,EAAgBC,0CAAhB,EAAP;AACD,KAvBI;AAwBLqB,WAAO,iBAAM;AACXtB,qBAAe,EAAf;AACAC,6BAAuB,EAAvB;AACD;AA3BI,GAAP;AA6BD,CArED","file":"prefetcher.js","sourcesContent":["module.exports = ({ getNextQueuedResources, createResourceDownload }) => {\n  let pagesLoading = []\n  let resourcesDownloading = []\n\n  // Do things\n  const startResourceDownloading = () => {\n    const nextResource = getNextQueuedResources()\n    if (nextResource) {\n      resourcesDownloading.push(nextResource)\n      createResourceDownload(nextResource)\n    }\n  }\n\n  const reducer = action => {\n    switch (action.type) {\n      case `RESOURCE_FINISHED`:\n        resourcesDownloading = resourcesDownloading.filter(\n          r => r !== action.payload\n        )\n        break\n      case `ON_PRE_LOAD_PAGE_RESOURCES`:\n        pagesLoading.push(action.payload.path)\n        break\n      case `ON_POST_LOAD_PAGE_RESOURCES`:\n        pagesLoading = pagesLoading.filter(p => p !== action.payload.page.path)\n        break\n      case `ON_NEW_RESOURCES_ADDED`:\n        break\n    }\n\n    // Take actions.\n    // Wait for event loop queue to finish.\n    setTimeout(() => {\n      if (resourcesDownloading.length === 0 && pagesLoading.length === 0) {\n        // Start another resource downloading.\n        startResourceDownloading()\n      }\n    }, 0)\n  }\n\n  return {\n    onResourcedFinished: event => {\n      // Tell prefetcher that the resource finished downloading\n      // so it can grab the next one.\n      reducer({ type: `RESOURCE_FINISHED`, payload: event })\n    },\n    onPreLoadPageResources: event => {\n      // Tell prefetcher a page load has started so it should stop\n      // loading anything new\n      reducer({ type: `ON_PRE_LOAD_PAGE_RESOURCES`, payload: event })\n    },\n    onPostLoadPageResources: event => {\n      // Tell prefetcher a page load has finished so it should start\n      // loading resources again.\n      reducer({ type: `ON_POST_LOAD_PAGE_RESOURCES`, payload: event })\n    },\n    onNewResourcesAdded: () => {\n      // Tell prefetcher that more resources to be downloaded have\n      // been added.\n      reducer({ type: `ON_NEW_RESOURCES_ADDED` })\n    },\n    getState: () => {\n      return { pagesLoading, resourcesDownloading }\n    },\n    empty: () => {\n      pagesLoading = []\n      resourcesDownloading = []\n    },\n  }\n}\n"]}