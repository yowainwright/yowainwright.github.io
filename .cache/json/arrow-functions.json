{
    "data": {
        "site": {
            "siteMetadata": {
                "title": "Jeffry.in",
                "author": "Jeff Wainwright"
            }
        },
        "markdownRemark": {
            "id": "/Users/jwainwright/Dropbox/me/git-docs/yowainwright.github.io/src/pages/2017-01-06-arrow-functions.md absPath of file >>> MarkdownRemark",
            "html": "<p>Note post: this short post about Arrow Functions after watching <a href=\"https://es6.io/\">ES6 For Everyone</a>(EFE——for this post) by <a href=\"http://wesbos.com/\">Wes Bos</a>! Arrow functions are simplier way to write functions in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">JavaScript</a>. This post contains a few things that I wasn't completely clear on about Arrow Functions that EFE really clarified for me.</p>\n<h2>Arrow Function Illuminations:</h2>\n<ol>\n<li><code>This</code> will be undefined.</li>\n<li>Your can remove even more code cruft that is usually done with Arrow Functions (no mustache brackets needed).</li>\n<li>Arguments which are objects will not work in arrow functions</li>\n</ol>\n<h2>Deeper Dive</h2>\n<p>When writing a function normal <code>this</code> can be bound to things (like elements in example). With arrow functions, <em>this</em> (pun intended) is not the case.</p>\n<h3>The This Key Word Is Undefined</h3>\n<p><strong>ES5 Function</strong></p>\n<pre><code class=\"language-javascript\">var clickFunction = function clickFunc() {\n  console.log(this);\n  // This would be the selected element\n};\nvar button1 = document.getElementById('button-1');\nbutton1.addEventListener('click', clickFunction, false);\n</code></pre>\n<p><strong>ES6 Arrow Function</strong></p>\n<pre><code class=\"language-javascript\">document.getElementById('elem').addEventListener('click', () => {\n  console.log(this);\n  // `this` would be undefined\n});\n</code></pre>\n<h3>Remove Even More Cruft With Arrow Functions</h3>\n<p>Arrow functions can be even more minimal but most people add certain things like <code>mustaches</code> for legibility.</p>\n<p><strong>Standard Way of Writing an Arrow Function</strong></p>\n<pre><code class=\"language-javascript\">const button2 = document.getElementById('button-2');\nbutton2.addEventListener('click', () => {\n  console.log('Normal arrow function');\n});\n</code></pre>\n<p><strong>More Minimal Way An Arrow Function Can Be Written</strong></p>\n<pre><code class=\"language-javascript\">const button3 = document.getElementById('button-3');\nbutton3.addEventListener('click', () => console.log('arrow function with less cruft'));\n</code></pre>\n<h3>Objects Cannot Be Used In Arrow Function Arguments</h3>\n<p>Arrow functions can use arguments——as long as they're not objects.</p>\n<p><strong>Standard Way of Writing an Arrow Function</strong></p>\n<pre><code class=\"language-javascript\">const button4 = document.getElementById('button-4');\nconst anObj = {\n  name: 'Objecto'\n};\nbutton4.addEventListener('click', (anObj) => {\n  console.log(anObj);\n  // anObj will be undefined\n});\n</code></pre>\n<h2>Arrow Function Notes Conclusion</h2>\n<p>Play with the examples above on <a href=\"http://codepen.io/yowainwright/pen/5e5d740b1388b400fc1cc0717f5a29f8\">CodePen</a>.</p>\n<p>What the <code>this</code> key word will be bound to and how minimal arrow functions can be is well documented. ES6 For Everyone gives clear examples of that make it much clearer though.</p>\n<p>Thank you <a href=\"http://wesbos.com/\">Wes Bos</a>!!!</p>\n<p><strong>Update:</strong> After talking with Dan Benson a bit, I discovered even more about arrow functions. These things were covered in Wes Bos's course but I'm even clearer now. <a href=\"https://jeffry.in/arrow-functions-cont/\">See more</a> examples here. </p>",
            "frontmatter": {
                "title": "Arrow Function Notes  After Watching ES6 For Everyone",
                "date": "January 06, 2017"
            }
        }
    },
    "pathContext": {
        "path": "/arrow-functions/"
    }
}