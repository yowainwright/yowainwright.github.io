{"version":3,"sources":["../../src/cache-dir/loader.js"],"names":["findPage","syncRequires","asyncRequires","pathScriptsCache","resourceStrCache","resourceCache","pages","pathArray","pathCount","resourcesArray","resourcesCount","preferDefault","m","default","prefetcher","inInitialRender","process","env","NODE_ENV","require","getNextQueuedResources","slice","createResourceDownload","fetchResource","resourceName","filter","r","onResourcedFinished","on","onPreLoadPageResources","e","onPostLoadPageResources","sortResourcesByCount","a","b","sortPagesByCount","cb","nextTick","resourceFunction","components","json","err","executeChunk","getResourceModule","module","mountOrder","queue","empty","addPagesArray","newPages","pathPrefix","__PREFIX_PATHS__","__PATH_PREFIX__","addDevRequires","devRequires","addProdRequires","prodRequires","dequeue","pop","enqueue","some","p","path","mountOrderBoost","has","unshift","sort","page","jsonName","indexOf","componentChunkName","onNewResourcesAdded","getResources","getPages","getPage","pathname","getResourcesForPathname","navigator","serviceWorker","controller","state","getRegistrations","then","registrations","registration","unregister","window","location","reload","pageResources","component","console","log","emit","done","c","j","undefined","peek","length","exports"],"mappings":"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","file":"loader.js","sourcesContent":["import pageFinderFactory from \"./find-page\"\nimport emitter from \"./emitter\"\nlet findPage\n\nlet syncRequires = {}\nlet asyncRequires = {}\nlet pathScriptsCache = {}\nlet resourceStrCache = {}\nlet resourceCache = {}\nlet pages = []\n// Note we're not actively using the path data atm. There\n// could be future optimizations however around trying to ensure\n// we load all resources for likely-to-be-visited paths.\nlet pathArray = []\nlet pathCount = {}\nlet resourcesArray = []\nlet resourcesCount = {}\nconst preferDefault = m => (m && m.default) || m\nlet prefetcher\nlet inInitialRender = true\n\n// Prefetcher logic\nif (process.env.NODE_ENV === `production`) {\n  prefetcher = require(`./prefetcher`)({\n    getNextQueuedResources: () => resourcesArray.slice(-1)[0],\n    createResourceDownload: resourceName => {\n      fetchResource(resourceName, () => {\n        resourcesArray = resourcesArray.filter(r => r !== resourceName)\n        prefetcher.onResourcedFinished(resourceName)\n      })\n    },\n  })\n  emitter.on(`onPreLoadPageResources`, e => {\n    prefetcher.onPreLoadPageResources(e)\n  })\n  emitter.on(`onPostLoadPageResources`, e => {\n    prefetcher.onPostLoadPageResources(e)\n  })\n}\n\nconst sortResourcesByCount = (a, b) => {\n  if (resourcesCount[a] > resourcesCount[b]) {\n    return 1\n  } else if (resourcesCount[a] < resourcesCount[b]) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\nconst sortPagesByCount = (a, b) => {\n  if (pathCount[a] > pathCount[b]) {\n    return 1\n  } else if (pathCount[a] < pathCount[b]) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\nconst fetchResource = (resourceName, cb = () => {}) => {\n  if (resourceStrCache[resourceName]) {\n    process.nextTick(() => {\n      cb(null, resourceStrCache[resourceName])\n    })\n  } else {\n    // Find resource\n    const resourceFunction =\n      resourceName.slice(0, 6) === `page-c`\n        ? asyncRequires.components[resourceName]\n        : asyncRequires.json[resourceName]\n\n    // Download the resource\n    resourceFunction((err, executeChunk) => {\n      resourceStrCache[resourceName] = executeChunk\n      cb(err, executeChunk)\n    })\n  }\n}\n\nconst getResourceModule = (resourceName, cb) => {\n  if (resourceCache[resourceName]) {\n    process.nextTick(() => {\n      cb(null, resourceCache[resourceName])\n    })\n  } else {\n    fetchResource(resourceName, (err, executeChunk) => {\n      if (err) {\n        cb(err)\n      } else {\n        const module = preferDefault(executeChunk())\n        resourceCache[resourceName] = module\n        cb(err, module)\n      }\n    })\n  }\n}\n\nlet mountOrder = 1\nconst queue = {\n  empty: () => {\n    pathArray = []\n    pathCount = {}\n    resourcesCount = {}\n    resourcesArray = []\n    pages = []\n  },\n  addPagesArray: newPages => {\n    pages = newPages\n    let pathPrefix = ``\n    if (typeof __PREFIX_PATHS__ !== `undefined`) {\n      pathPrefix = __PATH_PREFIX__\n    }\n    findPage = pageFinderFactory(newPages, pathPrefix)\n  },\n  addDevRequires: devRequires => {\n    syncRequires = devRequires\n  },\n  addProdRequires: prodRequires => {\n    asyncRequires = prodRequires\n  },\n  dequeue: path => pathArray.pop(),\n  enqueue: path => {\n    // Check page exists.\n    if (!pages.some(p => p.path === path)) {\n      return false\n    }\n\n    const mountOrderBoost = 1 / mountOrder\n    mountOrder += 1\n    // console.log(\n    // `enqueue \"${path}\", mountOrder: \"${mountOrder}, mountOrderBoost: ${mountOrderBoost}`\n    // )\n\n    // Add to path counts.\n    if (!pathCount[path]) {\n      pathCount[path] = 1\n    } else {\n      pathCount[path] += 1\n    }\n\n    // Add path to queue.\n    if (!queue.has(path)) {\n      pathArray.unshift(path)\n    }\n\n    // Sort pages by pathCount\n    pathArray.sort(sortPagesByCount)\n\n    // Add resources to queue.\n    const page = findPage(path)\n    if (page.jsonName) {\n      if (!resourcesCount[page.jsonName]) {\n        resourcesCount[page.jsonName] = 1 + mountOrderBoost\n      } else {\n        resourcesCount[page.jsonName] += 1 + mountOrderBoost\n      }\n\n      // Before adding, checking that the JSON resource isn't either\n      // already queued or been downloading.\n      if (\n        resourcesArray.indexOf(page.jsonName) === -1 &&\n        !resourceStrCache[page.jsonName]\n      ) {\n        resourcesArray.unshift(page.jsonName)\n      }\n    }\n    if (page.componentChunkName) {\n      if (!resourcesCount[page.componentChunkName]) {\n        resourcesCount[page.componentChunkName] = 1 + mountOrderBoost\n      } else {\n        resourcesCount[page.componentChunkName] += 1 + mountOrderBoost\n      }\n\n      // Before adding, checking that the component resource isn't either\n      // already queued or been downloading.\n      if (\n        resourcesArray.indexOf(page.componentChunkName) === -1 &&\n        !resourceStrCache[page.jsonName]\n      ) {\n        resourcesArray.unshift(page.componentChunkName)\n      }\n    }\n\n    // Sort resources by resourcesCount.\n    resourcesArray.sort(sortResourcesByCount)\n    if (process.env.NODE_ENV === `production`) {\n      prefetcher.onNewResourcesAdded()\n    }\n\n    return true\n  },\n  getResources: () => {\n    return {\n      resourcesArray,\n      resourcesCount,\n    }\n  },\n  getPages: () => {\n    return {\n      pathArray,\n      pathCount,\n    }\n  },\n  getPage: pathname => findPage(pathname),\n  has: path => pathArray.some(p => p === path),\n  getResourcesForPathname: (path, cb = () => {}) => {\n    if (\n      inInitialRender &&\n      navigator &&\n      navigator.serviceWorker &&\n      navigator.serviceWorker.controller &&\n      navigator.serviceWorker.controller.state === `activated`\n    ) {\n      // If we're loading from a service worker (it's already activated on\n      // this initial render) and we can't find a page, there's a good chance\n      // we're on a new page that this (now old) service worker doesn't know\n      // about so we'll unregister it and reload.\n      if (!findPage(path)) {\n        navigator.serviceWorker\n          .getRegistrations()\n          .then(function(registrations) {\n            for (let registration of registrations) {\n              registration.unregister()\n            }\n            window.location.reload()\n          })\n      }\n    }\n    inInitialRender = false\n    // In development we know the code is loaded already\n    // so we just return with it immediately.\n    if (process.env.NODE_ENV !== `production`) {\n      const page = findPage(path)\n      if (!page) return\n\n      const pageResources = {\n        component: syncRequires.components[page.componentChunkName],\n        json: syncRequires.json[page.jsonName],\n      }\n      cb(pageResources)\n      return pageResources\n      // Production code path\n    } else {\n      const page = findPage(path)\n\n      if (!page) {\n        console.log(`A page wasn't found for \"${path}\"`)\n        return\n      }\n\n      // Use the path from the page so the pathScriptsCache uses\n      // the normalized path.\n      path = page.path\n\n      // Check if it's in the cache already.\n      if (pathScriptsCache[path]) {\n        process.nextTick(() => {\n          cb(pathScriptsCache[path])\n          emitter.emit(`onPostLoadPageResources`, {\n            page,\n            pageResources: pathScriptsCache[path],\n          })\n        })\n        return pathScriptsCache[path]\n      }\n\n      emitter.emit(`onPreLoadPageResources`, { path })\n      // Nope, we need to load resource(s)\n      let component\n      let json\n      // Load the component/json and parallal and call this\n      // function when they're done loading. When both are loaded,\n      // we move on.\n      const done = () => {\n        if (component && json) {\n          pathScriptsCache[path] = { component, json }\n          const pageResources = { component, json }\n          cb(pageResources)\n          emitter.emit(`onPostLoadPageResources`, {\n            page,\n            pageResources,\n          })\n        }\n      }\n      getResourceModule(page.componentChunkName, (err, c) => {\n        if (err) {\n          console.log(`Loading the component for ${page.path} failed`)\n        }\n        component = c\n        done()\n      })\n      getResourceModule(page.jsonName, (err, j) => {\n        if (err) {\n          console.log(`Loading the JSON for ${page.path} failed`)\n        }\n        json = j\n        done()\n      })\n\n      return undefined\n    }\n  },\n  peek: path => pathArray.slice(-1)[0],\n  length: () => pathArray.length,\n  indexOf: path => pathArray.length - pathArray.indexOf(path) - 1,\n}\n\nmodule.exports = queue\n"]}