{"version":3,"sources":["../../src/cache-dir/static-entry.js"],"names":["Html","require","e","pathChunkName","name","path","$","createElement","layout","layouts","index","props","children","module","exports","locals","callback","pathPrefix","__PREFIX_PATHS__","__PATH_PREFIX__","bodyHTML","headComponents","preBodyComponents","postBodyComponents","bodyProps","replaceBodyHTMLString","body","setHeadComponents","concat","components","setPreBodyComponents","setPostBodyComponents","setBodyProps","bodyComponent","location","pathname","context","layoutProps","routeProps","page","find","componentChunkName","json","jsonName","chunkManifest","unshift","__html","stats","scripts","map","fetchKey","s","fetchedScript","prefixedScript","filter","forEach","script","scriptsString","join","push","html"],"mappings":"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","file":"static-entry.js","sourcesContent":["import React from \"react\"\nimport { renderToString, renderToStaticMarkup } from \"react-dom/server\"\nimport { StaticRouter, Route, withRouter } from \"react-router-dom\"\nimport { kebabCase, get, merge, isArray, isString } from \"lodash\"\nimport apiRunner from \"./api-runner-ssr\"\nimport pages from \"./pages.json\"\nimport syncRequires from \"./sync-requires\"\n\nlet Html\ntry {\n  Html = require(`../src/html`)\n} catch (e) {\n  Html = require(`./default-html`)\n}\n\nconst pathChunkName = path => {\n  const name = path === `/` ? `index` : kebabCase(path)\n  return `path---${name}`\n}\n\nconst $ = React.createElement\n\n// Use default layout if one isn't set.\nlet layout\nif (syncRequires.layouts.index) {\n  layout = syncRequires.layouts.index\n} else {\n  layout = props =>\n    <div>\n      {props.children()}\n    </div>\n}\n\nmodule.exports = (locals, callback) => {\n  let pathPrefix = `/`\n  if (__PREFIX_PATHS__) {\n    pathPrefix = `${__PATH_PREFIX__}/`\n  }\n\n  let bodyHTML = ``\n  let headComponents = []\n  let preBodyComponents = []\n  let postBodyComponents = []\n  let bodyProps = {}\n\n  const replaceBodyHTMLString = body => {\n    bodyHTML = body\n  }\n\n  const setHeadComponents = components => {\n    headComponents = headComponents.concat(components)\n  }\n\n  const setPreBodyComponents = components => {\n    preBodyComponents = preBodyComponents.concat(components)\n  }\n\n  const setPostBodyComponents = components => {\n    postBodyComponents = postBodyComponents.concat(components)\n  }\n\n  const setBodyProps = props => {\n    bodyProps = merge({}, bodyProps, props)\n  }\n\n  const bodyComponent = $(\n    StaticRouter,\n    {\n      location: {\n        pathname: locals.path,\n      },\n      context: {},\n    },\n    $(withRouter(layout), {\n      children: layoutProps =>\n        $(Route, {\n          children: routeProps => {\n            const props = layoutProps ? layoutProps : routeProps\n            const page = pages.find(\n              page => page.path === props.location.pathname\n            )\n            return $(syncRequires.components[page.componentChunkName], {\n              ...props,\n              ...syncRequires.json[page.jsonName],\n            })\n          },\n        }),\n    })\n  )\n\n  // Let the site or plugin render the page component.\n  apiRunner(`replaceRenderer`, {\n    bodyComponent,\n    replaceBodyHTMLString,\n    setHeadComponents,\n    setPreBodyComponents,\n    setPostBodyComponents,\n    setBodyProps,\n  })\n\n  // If no one stepped up, we'll handle it.\n  if (!bodyHTML) {\n    bodyHTML = renderToString(bodyComponent)\n  }\n\n  apiRunner(`onRenderBody`, {\n    setHeadComponents,\n    setPreBodyComponents,\n    setPostBodyComponents,\n    setBodyProps,\n    pathname: locals.path,\n  })\n\n  // Add the chunk-manifest as a head component.\n  const chunkManifest = require(`!raw!../public/chunk-manifest.json`)\n\n  headComponents.unshift(\n    <script\n      id=\"webpack-manifest\"\n      key=\"webpack-manifest\"\n      dangerouslySetInnerHTML={{\n        __html: `\n            //<![CDATA[\n            window.webpackManifest = ${chunkManifest}\n            //]]>\n            `,\n      }}\n    />\n  )\n\n  let stats\n  try {\n    stats = require(`../public/stats.json`)\n  } catch (e) {\n    // ignore\n  }\n\n  // Create paths to scripts\n  const scripts = [\n    `commons`,\n    `app`,\n    `layout-component---index`,\n    pathChunkName(locals.path),\n    pages.find(page => page.path === locals.path).componentChunkName,\n  ]\n    .map(s => {\n      const fetchKey = `assetsByChunkName[${s}]`\n\n      let fetchedScript = get(stats, fetchKey)\n\n      if (!fetchedScript) {\n        return null\n      }\n\n      // If sourcemaps are enabled, then the entry will be an array with\n      // the script name as the first entry.\n      fetchedScript = isArray(fetchedScript) ? fetchedScript[0] : fetchedScript\n      const prefixedScript = `${pathPrefix}${fetchedScript}`\n\n      // Make sure we found a component.\n      if (prefixedScript === `/`) {\n        return null\n      }\n\n      return prefixedScript\n    })\n    .filter(s => isString(s))\n\n  scripts.forEach(script => {\n    // Add preload <link>s for scripts.\n    headComponents.unshift(\n      <link rel=\"preload\" key={script} href={script} as=\"script\" />\n    )\n  })\n\n  // Add script loader for page scripts to the head.\n  // Taken from https://www.html5rocks.com/en/tutorials/speed/script-loading/\n  const scriptsString = scripts.map(s => `\"${s}\"`).join(`,`)\n  headComponents.push(\n    <script\n      key={`script-loader`}\n      dangerouslySetInnerHTML={{\n        __html: `\n  !function(e,t,r){function n(){for(;d[0]&&\"loaded\"==d[0][f];)c=d.shift(),c[o]=!i.parentNode.insertBefore(c,i)}for(var s,a,c,d=[],i=e.scripts[0],o=\"onreadystatechange\",f=\"readyState\";s=r.shift();)a=e.createElement(t),\"async\"in i?(a.async=!1,e.head.appendChild(a)):i[f]?(d.push(a),a[o]=n):e.write(\"<\"+t+' src=\"'+s+'\" defer></'+t+\">\"),a.src=s}(document,\"script\",[\n  ${scriptsString}\n])\n  `,\n      }}\n    />\n  )\n\n  const html = `<!DOCTYPE html>\\n ${renderToStaticMarkup(\n    <Html\n      {...bodyProps}\n      headComponents={headComponents}\n      preBodyComponents={preBodyComponents}\n      postBodyComponents={postBodyComponents}\n      body={bodyHTML}\n      path={locals.path}\n    />\n  )}`\n\n  callback(null, html)\n}\n"]}